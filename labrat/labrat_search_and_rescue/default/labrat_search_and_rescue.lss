
labrat_search_and_rescue.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000172  00800100  0000177c  000017f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000177c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 000001c0  00000000  00000000  00001962  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000036c  00000000  00000000  00001b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00002987  00000000  00000000  00001e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000015a7  00000000  00000000  00004815  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00001d03  00000000  00000000  00005dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000360  00000000  00000000  00007ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000533  00000000  00000000  00007e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000f22  00000000  00000000  00008353  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000098  00000000  00000000  00009275  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      6c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      70:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	12 e0       	ldi	r17, 0x02	; 2
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ec e7       	ldi	r30, 0x7C	; 124
      90:	f7 e1       	ldi	r31, 0x17	; 23
      92:	02 c0       	rjmp	.+4      	; 0x98 <.do_copy_data_start>

00000094 <.do_copy_data_loop>:
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0

00000098 <.do_copy_data_start>:
      98:	a2 37       	cpi	r26, 0x72	; 114
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <.do_copy_data_loop>
      9e:	0e 94 49 01 	call	0x292	; 0x292 <main>
      a2:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <_exit>

000000a6 <__bad_interrupt>:
      a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <Stop>:
	SetMotorSpeed(R_MOT, FWD, 128);
}

void Stop()
{
	SetMotorSpeed(B_MOT, STOP, 0);
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	63 e0       	ldi	r22, 0x03	; 3
      ae:	40 e0       	ldi	r20, 0x00	; 0
      b0:	0e 94 9c 03 	call	0x738	; 0x738 <SetMotorSpeed>
}
      b4:	08 95       	ret

000000b6 <ForwardHalf>:
	SetMotorSpeed(R_MOT, FWD, 255);
}

void ForwardHalf()
{
	SetMotorSpeed(L_MOT, FWD, 145);
      b6:	81 e0       	ldi	r24, 0x01	; 1
      b8:	61 e0       	ldi	r22, 0x01	; 1
      ba:	41 e9       	ldi	r20, 0x91	; 145
      bc:	0e 94 9c 03 	call	0x738	; 0x738 <SetMotorSpeed>
	SetMotorSpeed(R_MOT, FWD, 128);
      c0:	82 e0       	ldi	r24, 0x02	; 2
      c2:	61 e0       	ldi	r22, 0x01	; 1
      c4:	40 e8       	ldi	r20, 0x80	; 128
      c6:	0e 94 9c 03 	call	0x738	; 0x738 <SetMotorSpeed>
}
      ca:	08 95       	ret

000000cc <ForwardFull>:
		return 0;
}
	
void ForwardFull()
{
	SetMotorSpeed(L_MOT, FWD, 255);
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	61 e0       	ldi	r22, 0x01	; 1
      d0:	4f ef       	ldi	r20, 0xFF	; 255
      d2:	0e 94 9c 03 	call	0x738	; 0x738 <SetMotorSpeed>
	SetMotorSpeed(R_MOT, FWD, 255);
      d6:	82 e0       	ldi	r24, 0x02	; 2
      d8:	61 e0       	ldi	r22, 0x01	; 1
      da:	4f ef       	ldi	r20, 0xFF	; 255
      dc:	0e 94 9c 03 	call	0x738	; 0x738 <SetMotorSpeed>
}
      e0:	08 95       	ret

000000e2 <Search>:
		_delay_ms(250);
	}
}

int Search(unsigned int lir, unsigned int cir, unsigned int rir)
{
      e2:	cf 92       	push	r12
      e4:	df 92       	push	r13
      e6:	ef 92       	push	r14
      e8:	ff 92       	push	r15
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
      f2:	6c 01       	movw	r12, r24
      f4:	eb 01       	movw	r28, r22
      f6:	7a 01       	movw	r14, r20
	printAllXBee("lir: %d     cir: %d     rir: %d    \0", lir, cir, rir);
      f8:	8d b7       	in	r24, 0x3d	; 61
      fa:	9e b7       	in	r25, 0x3e	; 62
      fc:	0a 97       	sbiw	r24, 0x0a	; 10
      fe:	0f b6       	in	r0, 0x3f	; 63
     100:	f8 94       	cli
     102:	9e bf       	out	0x3e, r25	; 62
     104:	0f be       	out	0x3f, r0	; 63
     106:	8d bf       	out	0x3d, r24	; 61
     108:	0d b7       	in	r16, 0x3d	; 61
     10a:	1e b7       	in	r17, 0x3e	; 62
     10c:	0f 5f       	subi	r16, 0xFF	; 255
     10e:	1f 4f       	sbci	r17, 0xFF	; 255
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	91 e0       	ldi	r25, 0x01	; 1
     114:	ed b7       	in	r30, 0x3d	; 61
     116:	fe b7       	in	r31, 0x3e	; 62
     118:	92 83       	std	Z+2, r25	; 0x02
     11a:	81 83       	std	Z+1, r24	; 0x01
     11c:	b6 01       	movw	r22, r12
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	0e 94 03 09 	call	0x1206	; 0x1206 <__floatunsisf>
     126:	f8 01       	movw	r30, r16
     128:	62 83       	std	Z+2, r22	; 0x02
     12a:	73 83       	std	Z+3, r23	; 0x03
     12c:	84 83       	std	Z+4, r24	; 0x04
     12e:	95 83       	std	Z+5, r25	; 0x05
     130:	d7 83       	std	Z+7, r29	; 0x07
     132:	c6 83       	std	Z+6, r28	; 0x06
     134:	f1 86       	std	Z+9, r15	; 0x09
     136:	e0 86       	std	Z+8, r14	; 0x08
     138:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <printAllXBee>
	
		if((cir < lir) && (cir < rir)) 
     13c:	8d b7       	in	r24, 0x3d	; 61
     13e:	9e b7       	in	r25, 0x3e	; 62
     140:	0a 96       	adiw	r24, 0x0a	; 10
     142:	0f b6       	in	r0, 0x3f	; 63
     144:	f8 94       	cli
     146:	9e bf       	out	0x3e, r25	; 62
     148:	0f be       	out	0x3f, r0	; 63
     14a:	8d bf       	out	0x3d, r24	; 61
     14c:	cc 15       	cp	r28, r12
     14e:	dd 05       	cpc	r29, r13
     150:	f0 f4       	brcc	.+60     	; 0x18e <Search+0xac>
     152:	ce 15       	cp	r28, r14
     154:	df 05       	cpc	r29, r15
     156:	d8 f4       	brcc	.+54     	; 0x18e <Search+0xac>
		{
			SetMotorSpeed(B_MOT, STOP, 255);
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	63 e0       	ldi	r22, 0x03	; 3
     15c:	4f ef       	ldi	r20, 0xFF	; 255
     15e:	0e 94 9c 03 	call	0x738	; 0x738 <SetMotorSpeed>
			printAllXBee("Target Ahead\0",0);
     162:	00 d0       	rcall	.+0      	; 0x164 <Search+0x82>
     164:	00 d0       	rcall	.+0      	; 0x166 <Search+0x84>
     166:	00 d0       	rcall	.+0      	; 0x168 <Search+0x86>
     168:	85 e2       	ldi	r24, 0x25	; 37
     16a:	91 e0       	ldi	r25, 0x01	; 1
     16c:	ed b7       	in	r30, 0x3d	; 61
     16e:	fe b7       	in	r31, 0x3e	; 62
     170:	92 83       	std	Z+2, r25	; 0x02
     172:	81 83       	std	Z+1, r24	; 0x01
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	83 83       	std	Z+3, r24	; 0x03
     17e:	94 83       	std	Z+4, r25	; 0x04
     180:	a5 83       	std	Z+5, r26	; 0x05
     182:	b6 83       	std	Z+6, r27	; 0x06
     184:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <printAllXBee>
     188:	21 e0       	ldi	r18, 0x01	; 1
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	32 c0       	rjmp	.+100    	; 0x1f2 <Search+0x110>
			return 1;
		}
		
		else if(lir < rir)
     18e:	ce 14       	cp	r12, r14
     190:	df 04       	cpc	r13, r15
     192:	80 f4       	brcc	.+32     	; 0x1b4 <Search+0xd2>
		{
			SetMotorSpeed(L_MOT, REV, 255);
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	60 e0       	ldi	r22, 0x00	; 0
     198:	4f ef       	ldi	r20, 0xFF	; 255
     19a:	0e 94 9c 03 	call	0x738	; 0x738 <SetMotorSpeed>
			SetMotorSpeed(R_MOT, FWD, 255);
     19e:	82 e0       	ldi	r24, 0x02	; 2
     1a0:	61 e0       	ldi	r22, 0x01	; 1
     1a2:	4f ef       	ldi	r20, 0xFF	; 255
     1a4:	0e 94 9c 03 	call	0x738	; 0x738 <SetMotorSpeed>
			printAllXBee("Target Left\0",0);
     1a8:	00 d0       	rcall	.+0      	; 0x1aa <Search+0xc8>
     1aa:	00 d0       	rcall	.+0      	; 0x1ac <Search+0xca>
     1ac:	00 d0       	rcall	.+0      	; 0x1ae <Search+0xcc>
     1ae:	83 e3       	ldi	r24, 0x33	; 51
     1b0:	91 e0       	ldi	r25, 0x01	; 1
     1b2:	0f c0       	rjmp	.+30     	; 0x1d2 <Search+0xf0>
		}
		else
		{
			SetMotorSpeed(R_MOT, REV, 255);
     1b4:	82 e0       	ldi	r24, 0x02	; 2
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	4f ef       	ldi	r20, 0xFF	; 255
     1ba:	0e 94 9c 03 	call	0x738	; 0x738 <SetMotorSpeed>
			SetMotorSpeed(L_MOT, FWD, 255);
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	4f ef       	ldi	r20, 0xFF	; 255
     1c4:	0e 94 9c 03 	call	0x738	; 0x738 <SetMotorSpeed>
			printAllXBee("Target Right\0",0);
     1c8:	00 d0       	rcall	.+0      	; 0x1ca <Search+0xe8>
     1ca:	00 d0       	rcall	.+0      	; 0x1cc <Search+0xea>
     1cc:	00 d0       	rcall	.+0      	; 0x1ce <Search+0xec>
     1ce:	80 e4       	ldi	r24, 0x40	; 64
     1d0:	91 e0       	ldi	r25, 0x01	; 1
     1d2:	ed b7       	in	r30, 0x3d	; 61
     1d4:	fe b7       	in	r31, 0x3e	; 62
     1d6:	92 83       	std	Z+2, r25	; 0x02
     1d8:	81 83       	std	Z+1, r24	; 0x01
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b0 e0       	ldi	r27, 0x00	; 0
     1e2:	83 83       	std	Z+3, r24	; 0x03
     1e4:	94 83       	std	Z+4, r25	; 0x04
     1e6:	a5 83       	std	Z+5, r26	; 0x05
     1e8:	b6 83       	std	Z+6, r27	; 0x06
     1ea:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <printAllXBee>
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	8d b7       	in	r24, 0x3d	; 61
     1f4:	9e b7       	in	r25, 0x3e	; 62
     1f6:	06 96       	adiw	r24, 0x06	; 6
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	f8 94       	cli
     1fc:	9e bf       	out	0x3e, r25	; 62
     1fe:	0f be       	out	0x3f, r0	; 63
     200:	8d bf       	out	0x3d, r24	; 61
		}
		return 0;
}
     202:	c9 01       	movw	r24, r18
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	1f 91       	pop	r17
     20a:	0f 91       	pop	r16
     20c:	ff 90       	pop	r15
     20e:	ef 90       	pop	r14
     210:	df 90       	pop	r13
     212:	cf 90       	pop	r12
     214:	08 95       	ret

00000216 <Hault>:
#include "LabRatUtils.h"


void Hault()
{
     216:	0f 93       	push	r16
     218:	1f 93       	push	r17
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
	SetMotorSpeed(B_MOT, STOP, 0); 
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	63 e0       	ldi	r22, 0x03	; 3
     222:	40 e0       	ldi	r20, 0x00	; 0
     224:	0e 94 9c 03 	call	0x738	; 0x738 <SetMotorSpeed>
     228:	c0 e0       	ldi	r28, 0x00	; 0
     22a:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     22c:	08 ec       	ldi	r16, 0xC8	; 200
     22e:	10 e0       	ldi	r17, 0x00	; 0
	for(int i=0; i < 10; i++)
	{
		SetLED(ON);
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetLED>
     236:	84 ec       	ldi	r24, 0xC4	; 196
     238:	99 e0       	ldi	r25, 0x09	; 9
     23a:	f8 01       	movw	r30, r16
     23c:	31 97       	sbiw	r30, 0x01	; 1
     23e:	f1 f7       	brne	.-4      	; 0x23c <Hault+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     240:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     242:	d9 f7       	brne	.-10     	; 0x23a <Hault+0x24>
		_delay_ms(250);
		SetLED(OFF);
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetLED>
     24a:	84 ec       	ldi	r24, 0xC4	; 196
     24c:	99 e0       	ldi	r25, 0x09	; 9
     24e:	f8 01       	movw	r30, r16
     250:	31 97       	sbiw	r30, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <Hault+0x3a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     254:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     256:	d9 f7       	brne	.-10     	; 0x24e <Hault+0x38>
		_delay_ms(250);
		SetLED(ON);
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetLED>
     25e:	84 ec       	ldi	r24, 0xC4	; 196
     260:	99 e0       	ldi	r25, 0x09	; 9
     262:	f8 01       	movw	r30, r16
     264:	31 97       	sbiw	r30, 0x01	; 1
     266:	f1 f7       	brne	.-4      	; 0x264 <Hault+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     268:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     26a:	d9 f7       	brne	.-10     	; 0x262 <Hault+0x4c>
		_delay_ms(250);
		SetLED(OFF);
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetLED>
     272:	84 ec       	ldi	r24, 0xC4	; 196
     274:	99 e0       	ldi	r25, 0x09	; 9
     276:	f8 01       	movw	r30, r16
     278:	31 97       	sbiw	r30, 0x01	; 1
     27a:	f1 f7       	brne	.-4      	; 0x278 <Hault+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     27c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     27e:	d9 f7       	brne	.-10     	; 0x276 <Hault+0x60>


void Hault()
{
	SetMotorSpeed(B_MOT, STOP, 0); 
	for(int i=0; i < 10; i++)
     280:	21 96       	adiw	r28, 0x01	; 1
     282:	ca 30       	cpi	r28, 0x0A	; 10
     284:	d1 05       	cpc	r29, r1
     286:	a1 f6       	brne	.-88     	; 0x230 <Hault+0x1a>
		SetLED(ON);
		_delay_ms(250);
		SetLED(OFF);
		_delay_ms(250);
	}
}
     288:	df 91       	pop	r29
     28a:	cf 91       	pop	r28
     28c:	1f 91       	pop	r17
     28e:	0f 91       	pop	r16
     290:	08 95       	ret

00000292 <main>:
	SetMotorSpeed(B_MOT, STOP, 0);
}


int main(void)
{	
     292:	6f 92       	push	r6
     294:	7f 92       	push	r7
     296:	8f 92       	push	r8
     298:	9f 92       	push	r9
     29a:	af 92       	push	r10
     29c:	bf 92       	push	r11
     29e:	cf 92       	push	r12
     2a0:	df 92       	push	r13
     2a2:	ef 92       	push	r14
     2a4:	ff 92       	push	r15
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
	init();
     2ae:	0e 94 02 02 	call	0x404	; 0x404 <init>
	initADC();
     2b2:	0e 94 22 02 	call	0x444	; 0x444 <initADC>
	//initOptSensor();
	InitMotorPWM();
     2b6:	0e 94 0e 05 	call	0xa1c	; 0xa1c <InitMotorPWM>
	SetMotorSpeed(B_MOT, STOP, 0);
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	63 e0       	ldi	r22, 0x03	; 3
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	0e 94 9c 03 	call	0x738	; 0x738 <SetMotorSpeed>
	initXBee(XBEE_2X, 25);
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	69 e1       	ldi	r22, 0x19	; 25
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	0e 94 10 02 	call	0x420	; 0x420 <initXBee>
			Hault();
		}

		if(bit_is_clear(PINC, PC6)) 
		{
			printAllXBee("Left Bumper\0", 0);
     2d0:	4e e4       	ldi	r20, 0x4E	; 78
     2d2:	64 2e       	mov	r6, r20
     2d4:	41 e0       	ldi	r20, 0x01	; 1
     2d6:	74 2e       	mov	r7, r20
     2d8:	0f 2e       	mov	r0, r31
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	af 2e       	mov	r10, r31
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	bf 2e       	mov	r11, r31
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	cf 2e       	mov	r12, r31
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	df 2e       	mov	r13, r31
     2ea:	f0 2d       	mov	r31, r0
			Stop();
		}

		if(bit_is_clear(PINC, PC7)) 
		{
			printAllXBee("Right Bumper\0", 0);
     2ec:	3b e5       	ldi	r19, 0x5B	; 91
     2ee:	83 2e       	mov	r8, r19
     2f0:	31 e0       	ldi	r19, 0x01	; 1
     2f2:	93 2e       	mov	r9, r19
	for(;;)
	{
		unsigned int lir, cir, rir;
		unsigned int liroffset = 10;
		unsigned int riroffset = 40;
		rir = getADC(0) - riroffset;
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <getADC>
     2fc:	28 ed       	ldi	r18, 0xD8	; 216
     2fe:	e2 2e       	mov	r14, r18
     300:	2f ef       	ldi	r18, 0xFF	; 255
     302:	f2 2e       	mov	r15, r18
     304:	e8 0e       	add	r14, r24
     306:	f9 1e       	adc	r15, r25
		cir = getADC(1);
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <getADC>
     310:	8c 01       	movw	r16, r24
		lir = getADC(2) - liroffset;
     312:	82 e0       	ldi	r24, 0x02	; 2
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <getADC>
     31a:	ec 01       	movw	r28, r24
     31c:	2a 97       	sbiw	r28, 0x0a	; 10
	
		if(bit_is_clear(PINC, PC6) && bit_is_clear(PINC, PC7)) 
     31e:	36 99       	sbic	0x06, 6	; 6
     320:	04 c0       	rjmp	.+8      	; 0x32a <main+0x98>
     322:	37 99       	sbic	0x06, 7	; 6
     324:	02 c0       	rjmp	.+4      	; 0x32a <main+0x98>
		{ 
			Hault();
     326:	0e 94 0b 01 	call	0x216	; 0x216 <Hault>
		}

		if(bit_is_clear(PINC, PC6)) 
     32a:	36 99       	sbic	0x06, 6	; 6
     32c:	1d c0       	rjmp	.+58     	; 0x368 <main+0xd6>
		{
			printAllXBee("Left Bumper\0", 0);
     32e:	00 d0       	rcall	.+0      	; 0x330 <main+0x9e>
     330:	00 d0       	rcall	.+0      	; 0x332 <main+0xa0>
     332:	00 d0       	rcall	.+0      	; 0x334 <main+0xa2>
     334:	ed b7       	in	r30, 0x3d	; 61
     336:	fe b7       	in	r31, 0x3e	; 62
     338:	72 82       	std	Z+2, r7	; 0x02
     33a:	61 82       	std	Z+1, r6	; 0x01
     33c:	a3 82       	std	Z+3, r10	; 0x03
     33e:	b4 82       	std	Z+4, r11	; 0x04
     340:	c5 82       	std	Z+5, r12	; 0x05
     342:	d6 82       	std	Z+6, r13	; 0x06
     344:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <printAllXBee>
			SetLED(ON);
     348:	8d b7       	in	r24, 0x3d	; 61
     34a:	9e b7       	in	r25, 0x3e	; 62
     34c:	06 96       	adiw	r24, 0x06	; 6
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	f8 94       	cli
     352:	9e bf       	out	0x3e, r25	; 62
     354:	0f be       	out	0x3f, r0	; 63
     356:	8d bf       	out	0x3d, r24	; 61
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetLED>
	SetMotorSpeed(R_MOT, FWD, 128);
}

void Stop()
{
	SetMotorSpeed(B_MOT, STOP, 0);
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	63 e0       	ldi	r22, 0x03	; 3
     362:	40 e0       	ldi	r20, 0x00	; 0
     364:	0e 94 9c 03 	call	0x738	; 0x738 <SetMotorSpeed>
			printAllXBee("Left Bumper\0", 0);
			SetLED(ON);
			Stop();
		}

		if(bit_is_clear(PINC, PC7)) 
     368:	37 99       	sbic	0x06, 7	; 6
     36a:	1d c0       	rjmp	.+58     	; 0x3a6 <main+0x114>
		{
			printAllXBee("Right Bumper\0", 0);
     36c:	00 d0       	rcall	.+0      	; 0x36e <main+0xdc>
     36e:	00 d0       	rcall	.+0      	; 0x370 <main+0xde>
     370:	00 d0       	rcall	.+0      	; 0x372 <main+0xe0>
     372:	ed b7       	in	r30, 0x3d	; 61
     374:	fe b7       	in	r31, 0x3e	; 62
     376:	92 82       	std	Z+2, r9	; 0x02
     378:	81 82       	std	Z+1, r8	; 0x01
     37a:	a3 82       	std	Z+3, r10	; 0x03
     37c:	b4 82       	std	Z+4, r11	; 0x04
     37e:	c5 82       	std	Z+5, r12	; 0x05
     380:	d6 82       	std	Z+6, r13	; 0x06
     382:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <printAllXBee>
			SetLED(ON);
     386:	8d b7       	in	r24, 0x3d	; 61
     388:	9e b7       	in	r25, 0x3e	; 62
     38a:	06 96       	adiw	r24, 0x06	; 6
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	f8 94       	cli
     390:	9e bf       	out	0x3e, r25	; 62
     392:	0f be       	out	0x3f, r0	; 63
     394:	8d bf       	out	0x3d, r24	; 61
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetLED>
	SetMotorSpeed(R_MOT, FWD, 128);
}

void Stop()
{
	SetMotorSpeed(B_MOT, STOP, 0);
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	63 e0       	ldi	r22, 0x03	; 3
     3a0:	40 e0       	ldi	r20, 0x00	; 0
     3a2:	0e 94 9c 03 	call	0x738	; 0x738 <SetMotorSpeed>
			printAllXBee("Right Bumper\0", 0);
			SetLED(ON);
			Stop();
		}

		if (!bit_is_clear(PINC, PC6) && 
     3a6:	36 9b       	sbis	0x06, 6	; 6
     3a8:	a5 cf       	rjmp	.-182    	; 0x2f4 <main+0x62>
     3aa:	37 9b       	sbis	0x06, 7	; 6
     3ac:	a3 cf       	rjmp	.-186    	; 0x2f4 <main+0x62>
			!bit_is_clear(PINC, PC7))
		{ 
			SetLED(OFF);		
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetLED>
			if(Search(lir,cir,rir))
     3b4:	ce 01       	movw	r24, r28
     3b6:	b8 01       	movw	r22, r16
     3b8:	a7 01       	movw	r20, r14
     3ba:	0e 94 71 00 	call	0xe2	; 0xe2 <Search>
     3be:	89 2b       	or	r24, r25
     3c0:	09 f4       	brne	.+2      	; 0x3c4 <main+0x132>
     3c2:	98 cf       	rjmp	.-208    	; 0x2f4 <main+0x62>
			{

				if( cir < 500) {ForwardHalf();}
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	04 3f       	cpi	r16, 0xF4	; 244
     3c8:	19 07       	cpc	r17, r25
     3ca:	18 f4       	brcc	.+6      	; 0x3d2 <main+0x140>
     3cc:	0e 94 5b 00 	call	0xb6	; 0xb6 <ForwardHalf>
     3d0:	05 c0       	rjmp	.+10     	; 0x3dc <main+0x14a>
				else if( cir < 800) {ForwardFull();}
     3d2:	00 52       	subi	r16, 0x20	; 32
     3d4:	13 40       	sbci	r17, 0x03	; 3
     3d6:	10 f4       	brcc	.+4      	; 0x3dc <main+0x14a>
     3d8:	0e 94 66 00 	call	0xcc	; 0xcc <ForwardFull>

				if( lir < rir - 80){ SetMotorSpeed(L_MOT, STOP, 0); }
     3dc:	c7 01       	movw	r24, r14
     3de:	80 55       	subi	r24, 0x50	; 80
     3e0:	90 40       	sbci	r25, 0x00	; 0
     3e2:	c8 17       	cp	r28, r24
     3e4:	d9 07       	cpc	r29, r25
     3e6:	10 f4       	brcc	.+4      	; 0x3ec <main+0x15a>
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	07 c0       	rjmp	.+14     	; 0x3fa <main+0x168>
				 else if( lir - 80 > rir ){ SetMotorSpeed(R_MOT, STOP, 0); }
     3ec:	c0 55       	subi	r28, 0x50	; 80
     3ee:	d0 40       	sbci	r29, 0x00	; 0
     3f0:	ec 16       	cp	r14, r28
     3f2:	fd 06       	cpc	r15, r29
     3f4:	08 f0       	brcs	.+2      	; 0x3f8 <main+0x166>
     3f6:	7e cf       	rjmp	.-260    	; 0x2f4 <main+0x62>
     3f8:	82 e0       	ldi	r24, 0x02	; 2
     3fa:	63 e0       	ldi	r22, 0x03	; 3
     3fc:	40 e0       	ldi	r20, 0x00	; 0
     3fe:	0e 94 9c 03 	call	0x738	; 0x738 <SetMotorSpeed>
     402:	78 cf       	rjmp	.-272    	; 0x2f4 <main+0x62>

00000404 <init>:
*
************************************************/

void init()
{
	DDRA = 0;
     404:	11 b8       	out	0x01, r1	; 1
	DDRB = 0;  //default all Ports to Inputs
     406:	14 b8       	out	0x04, r1	; 4
	DDRC = 0; 
     408:	17 b8       	out	0x07, r1	; 7
	DDRD = 0;
     40a:	1a b8       	out	0x0a, r1	; 10
	
	// Setup Outputs
	DDRA |= _BV(PA6); // User LED
     40c:	0e 9a       	sbi	0x01, 6	; 1
	DDRB |= _BV(PB0); // Motor 1 Direction 
     40e:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(PB1); // Motor 2 Direction
     410:	21 9a       	sbi	0x04, 1	; 4

	DDRB |= _BV(PB3); // Motor 1 PWM
     412:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(PB4); // Motor 2 PWM
     414:	24 9a       	sbi	0x04, 4	; 4
	
	//DDRD |= _BV(PD6); // GPIO
	//DDRD |= _BV(PD7); // GPIO

	// Opt. Sensor Interface (SPI)
	DDRB |= _BV(PB5); // MOSI
     416:	25 9a       	sbi	0x04, 5	; 4
	DDRB &= ~_BV(PB6); // MISO
     418:	26 98       	cbi	0x04, 6	; 4
	DDRB |= _BV(PB7); // SCK
     41a:	27 9a       	sbi	0x04, 7	; 4
void SetLED(uint8_t state)
{
	if(state == ON)
		PORTA |= _BV(PA6);
	else
		PORTA &= ~_BV(PA6);
     41c:	16 98       	cbi	0x02, 6	; 2
	
	SetLED(OFF);

	
	return;
}
     41e:	08 95       	ret

00000420 <initXBee>:

void initXBee(int XBeeSpeed, int baudrate)
{
	
	/* Initialize XBee Serial */
	UBRR0 = baudrate;
     420:	70 93 c5 00 	sts	0x00C5, r23
     424:	60 93 c4 00 	sts	0x00C4, r22
	
	if(XBeeSpeed)
     428:	89 2b       	or	r24, r25
     42a:	29 f0       	breq	.+10     	; 0x436 <initXBee+0x16>
		UCSR0A |= _BV(U2X0); // Set Double Speed
     42c:	80 91 c0 00 	lds	r24, 0x00C0
     430:	82 60       	ori	r24, 0x02	; 2
     432:	80 93 c0 00 	sts	0x00C0, r24
	
	UCSR0C = _BV(UCSZ00) | _BV(UCSZ01); //8 data bit frame 1 stop bit(default)
     436:	86 e0       	ldi	r24, 0x06	; 6
     438:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = _BV(TXEN0) | _BV(RXEN0); //enable TX & RXers
     43c:	88 e1       	ldi	r24, 0x18	; 24
     43e:	80 93 c1 00 	sts	0x00C1, r24
}
     442:	08 95       	ret

00000444 <initADC>:

void initADC()
{
	
	/* Enable ADC */
	PRR &= !_BV(PRADC); //enable ADC in power reduction register
     444:	e4 e6       	ldi	r30, 0x64	; 100
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	80 81       	ld	r24, Z
     44a:	10 82       	st	Z, r1
	ADMUX |= _BV(REFS0); //AVCC voltage ref
     44c:	ec e7       	ldi	r30, 0x7C	; 124
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	80 81       	ld	r24, Z
     452:	80 64       	ori	r24, 0x40	; 64
     454:	80 83       	st	Z, r24
	ADCSRA |=  _BV(ADEN); //Enable ADC
     456:	ea e7       	ldi	r30, 0x7A	; 122
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	80 81       	ld	r24, Z
     45c:	80 68       	ori	r24, 0x80	; 128
     45e:	80 83       	st	Z, r24

	return;
}
     460:	08 95       	ret

00000462 <setLevel>:
************************************************/


void setLevel(int num,int level)
{
	switch(num)
     462:	83 30       	cpi	r24, 0x03	; 3
     464:	91 05       	cpc	r25, r1
     466:	b1 f0       	breq	.+44     	; 0x494 <setLevel+0x32>
     468:	84 30       	cpi	r24, 0x04	; 4
     46a:	91 05       	cpc	r25, r1
     46c:	34 f4       	brge	.+12     	; 0x47a <setLevel+0x18>
     46e:	81 30       	cpi	r24, 0x01	; 1
     470:	91 05       	cpc	r25, r1
     472:	61 f0       	breq	.+24     	; 0x48c <setLevel+0x2a>
     474:	02 97       	sbiw	r24, 0x02	; 2
     476:	e9 f4       	brne	.+58     	; 0x4b2 <setLevel+0x50>
     478:	0b c0       	rjmp	.+22     	; 0x490 <setLevel+0x2e>
     47a:	85 30       	cpi	r24, 0x05	; 5
     47c:	91 05       	cpc	r25, r1
     47e:	a1 f0       	breq	.+40     	; 0x4a8 <setLevel+0x46>
     480:	85 30       	cpi	r24, 0x05	; 5
     482:	91 05       	cpc	r25, r1
     484:	64 f0       	brlt	.+24     	; 0x49e <setLevel+0x3c>
     486:	06 97       	sbiw	r24, 0x06	; 6
     488:	a1 f4       	brne	.+40     	; 0x4b2 <setLevel+0x50>
     48a:	11 c0       	rjmp	.+34     	; 0x4ae <setLevel+0x4c>
	{
		case A0:
			OCR0A = level;
     48c:	67 bd       	out	0x27, r22	; 39
     48e:	08 95       	ret
			break;
		case B0:
			OCR0B = level;
     490:	68 bd       	out	0x28, r22	; 40
     492:	08 95       	ret
			break;
        case A1:
			OCR1A = level;
     494:	70 93 89 00 	sts	0x0089, r23
     498:	60 93 88 00 	sts	0x0088, r22
     49c:	08 95       	ret
			break;
		case B1:
			OCR1B = level;
     49e:	70 93 8b 00 	sts	0x008B, r23
     4a2:	60 93 8a 00 	sts	0x008A, r22
     4a6:	08 95       	ret
			break;
        case A2:
			OCR2A = level;
     4a8:	60 93 b3 00 	sts	0x00B3, r22
     4ac:	08 95       	ret
			break;
		case B2:
			OCR2B = level;
     4ae:	60 93 b4 00 	sts	0x00B4, r22
     4b2:	08 95       	ret

000004b4 <getADC>:
{
	unsigned int result = 0;
	//putCharXBee('a');
    //while(!(ADCSRA & _BV(ADIF))); ///Ensure old conversion is 
	//putCharXBee('b');
    ADMUX &= 0xE0; //Clear MUX Bits
     4b4:	90 91 7c 00 	lds	r25, 0x007C
     4b8:	90 7e       	andi	r25, 0xE0	; 224
     4ba:	90 93 7c 00 	sts	0x007C, r25
	ADMUX |= ch;	//set mux channel
     4be:	90 91 7c 00 	lds	r25, 0x007C
     4c2:	98 2b       	or	r25, r24
     4c4:	90 93 7c 00 	sts	0x007C, r25
	DIDR0 = ch; //Disable Input buffer
     4c8:	80 93 7e 00 	sts	0x007E, r24
	
	ADCSRA |= _BV(ADSC); //start conv.
     4cc:	80 91 7a 00 	lds	r24, 0x007A
     4d0:	80 64       	ori	r24, 0x40	; 64
     4d2:	80 93 7a 00 	sts	0x007A, r24
	//putCharXBee('c');
	while(!(ADCSRA & _BV(ADIF))); //wait for finish
     4d6:	80 91 7a 00 	lds	r24, 0x007A
     4da:	84 ff       	sbrs	r24, 4
     4dc:	fc cf       	rjmp	.-8      	; 0x4d6 <getADC+0x22>
	//putCharXBee('d');
	result = ADCL; //save low byte
     4de:	20 91 78 00 	lds	r18, 0x0078
     4e2:	30 e0       	ldi	r19, 0x00	; 0
	result |= (ADCH<<8); //append high byte
     4e4:	40 91 79 00 	lds	r20, 0x0079
     4e8:	94 2f       	mov	r25, r20
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	28 2b       	or	r18, r24
     4ee:	39 2b       	or	r19, r25
	
	return result;

}
     4f0:	c9 01       	movw	r24, r18
     4f2:	08 95       	ret

000004f4 <getCharXBee>:
{
  char datah = 0;
  char datal = 0;
  char status = 0;

  while(!(UCSR0A & _BV(RXC0))); //wait for data
     4f4:	80 91 c0 00 	lds	r24, 0x00C0
     4f8:	87 ff       	sbrs	r24, 7
     4fa:	fc cf       	rjmp	.-8      	; 0x4f4 <getCharXBee>
  status = UCSR0A;
     4fc:	80 91 c0 00 	lds	r24, 0x00C0
  datah = UCSR0B;
     500:	90 91 c1 00 	lds	r25, 0x00C1
  datal = UDR0;
     504:	90 91 c6 00 	lds	r25, 0x00C6

  if (!(status&((1<<FE0)|(1<<DOR0)|(1<<UPE0))))
     508:	8c 71       	andi	r24, 0x1C	; 28
     50a:	09 f4       	brne	.+2      	; 0x50e <getCharXBee+0x1a>
     50c:	9f e3       	ldi	r25, 0x3F	; 63
  }

  datah = (datah >> 1) & 0x01;
  return datal;

}
     50e:	89 2f       	mov	r24, r25
     510:	08 95       	ret

00000512 <putCharXBee>:
*
* You can use a while loop and an
* array of chars to write strings
***********************************/
void putCharXBee(char c)
{
     512:	98 2f       	mov	r25, r24
	while(!(UCSR0A & _BV(UDRE0))); //wait for tx buffer to be ready
     514:	80 91 c0 00 	lds	r24, 0x00C0
     518:	85 ff       	sbrs	r24, 5
     51a:	fc cf       	rjmp	.-8      	; 0x514 <putCharXBee+0x2>
	UDR0 = c; //put chat to tx register
     51c:	90 93 c6 00 	sts	0x00C6, r25
	while(!(UCSR0A & _BV(TXC0))); //wait for tx to finish
     520:	80 91 c0 00 	lds	r24, 0x00C0
     524:	86 ff       	sbrs	r24, 6
     526:	fc cf       	rjmp	.-8      	; 0x520 <putCharXBee+0xe>
	return;
}
     528:	08 95       	ret

0000052a <putIntXBee>:
*(converts to ASCII equiv)
*
********************************/

void putIntXBee(int num)
{
     52a:	ef 92       	push	r14
     52c:	ff 92       	push	r15
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	7c 01       	movw	r14, r24
  uint16_t size = 1;
  uint16_t temp = num;
     538:	9c 01       	movw	r18, r24
  if(num < 0)
     53a:	97 ff       	sbrs	r25, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <putIntXBee+0x24>
  {
    putCharXBee('-');
     53e:	8d e2       	ldi	r24, 0x2D	; 45
     540:	0e 94 89 02 	call	0x512	; 0x512 <putCharXBee>
	num = (0xFFFF-num)+1;
     544:	f0 94       	com	r15
     546:	e1 94       	neg	r14
     548:	f1 08       	sbc	r15, r1
     54a:	f3 94       	inc	r15
     54c:	97 01       	movw	r18, r14
     54e:	c1 e0       	ldi	r28, 0x01	; 1
     550:	d0 e0       	ldi	r29, 0x00	; 0
     552:	10 c0       	rjmp	.+32     	; 0x574 <putIntXBee+0x4a>
	temp = num;
  }
  while(temp>=10)  //determine Number size
  {
    size*=10;    //10,100
     554:	ce 01       	movw	r24, r28
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	43 e0       	ldi	r20, 0x03	; 3
     55c:	cc 0f       	add	r28, r28
     55e:	dd 1f       	adc	r29, r29
     560:	4a 95       	dec	r20
     562:	e1 f7       	brne	.-8      	; 0x55c <putIntXBee+0x32>
     564:	c8 0f       	add	r28, r24
     566:	d9 1f       	adc	r29, r25
    temp/=10; //123,1
     568:	c9 01       	movw	r24, r18
     56a:	6a e0       	ldi	r22, 0x0A	; 10
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__udivmodhi4>
     572:	9b 01       	movw	r18, r22
  {
    putCharXBee('-');
	num = (0xFFFF-num)+1;
	temp = num;
  }
  while(temp>=10)  //determine Number size
     574:	2a 30       	cpi	r18, 0x0A	; 10
     576:	31 05       	cpc	r19, r1
     578:	68 f7       	brcc	.-38     	; 0x554 <putIntXBee+0x2a>
     57a:	18 c0       	rjmp	.+48     	; 0x5ac <putIntXBee+0x82>
  }
  
  temp=1;
  while(size>0)   //Output Number
  {
    putCharXBee((num/size)+48);
     57c:	c7 01       	movw	r24, r14
     57e:	be 01       	movw	r22, r28
     580:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__udivmodhi4>
     584:	8b 01       	movw	r16, r22
     586:	86 2f       	mov	r24, r22
     588:	80 5d       	subi	r24, 0xD0	; 208
     58a:	0e 94 89 02 	call	0x512	; 0x512 <putCharXBee>
    num-=((num/size)*size);      
     58e:	0c 9f       	mul	r16, r28
     590:	c0 01       	movw	r24, r0
     592:	0d 9f       	mul	r16, r29
     594:	90 0d       	add	r25, r0
     596:	1c 9f       	mul	r17, r28
     598:	90 0d       	add	r25, r0
     59a:	11 24       	eor	r1, r1
     59c:	e8 1a       	sub	r14, r24
     59e:	f9 0a       	sbc	r15, r25
    size /= 10;
     5a0:	ce 01       	movw	r24, r28
     5a2:	6a e0       	ldi	r22, 0x0A	; 10
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__udivmodhi4>
     5aa:	eb 01       	movw	r28, r22
    size*=10;    //10,100
    temp/=10; //123,1
  }
  
  temp=1;
  while(size>0)   //Output Number
     5ac:	20 97       	sbiw	r28, 0x00	; 0
     5ae:	31 f7       	brne	.-52     	; 0x57c <putIntXBee+0x52>
    num-=((num/size)*size);      
    size /= 10;
  }    
	
  return;
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	ff 90       	pop	r15
     5ba:	ef 90       	pop	r14
     5bc:	08 95       	ret

000005be <putFloatXBee>:
* Basically wrapper for
* printIntXBee(int) that adds
* decimal ability
*****************************/
void putFloatXBee(double dbl)
{
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	7b 01       	movw	r14, r22
     5cc:	8c 01       	movw	r16, r24
	int whole = 0;
	double dec = 0;

	dec = dbl - (int)(dbl); //remove int part
     5ce:	0e 94 af 08 	call	0x115e	; 0x115e <__fixsfsi>
     5d2:	eb 01       	movw	r28, r22
     5d4:	be 01       	movw	r22, r28
     5d6:	88 27       	eor	r24, r24
     5d8:	77 fd       	sbrc	r23, 7
     5da:	80 95       	com	r24
     5dc:	98 2f       	mov	r25, r24
     5de:	0e 94 51 08 	call	0x10a2	; 0x10a2 <__floatsisf>
     5e2:	9b 01       	movw	r18, r22
     5e4:	ac 01       	movw	r20, r24
     5e6:	c8 01       	movw	r24, r16
     5e8:	b7 01       	movw	r22, r14
     5ea:	0e 94 99 06 	call	0xd32	; 0xd32 <__subsf3>

	whole = (int)(dbl); //remove decimals

	dec*=1000;
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	4a e7       	ldi	r20, 0x7A	; 122
     5f4:	54 e4       	ldi	r21, 0x44	; 68
     5f6:	0e 94 f7 06 	call	0xdee	; 0xdee <__mulsf3>
     5fa:	7b 01       	movw	r14, r22
     5fc:	8c 01       	movw	r16, r24

	//remove sign from dec
	if(dec < 0)
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	0e 94 21 08 	call	0x1042	; 0x1042 <__ltsf2>
     60a:	88 23       	and	r24, r24
     60c:	24 f4       	brge	.+8      	; 0x616 <putFloatXBee+0x58>
	{
		dec *= -1;
     60e:	17 fb       	bst	r17, 7
     610:	10 95       	com	r17
     612:	17 f9       	bld	r17, 7
     614:	10 95       	com	r17
	}

	putIntXBee(whole);
     616:	ce 01       	movw	r24, r28
     618:	0e 94 95 02 	call	0x52a	; 0x52a <putIntXBee>
	putCharXBee('.');
     61c:	8e e2       	ldi	r24, 0x2E	; 46
     61e:	0e 94 89 02 	call	0x512	; 0x512 <putCharXBee>
	putIntXBee((int)(dec));
     622:	c8 01       	movw	r24, r16
     624:	b7 01       	movw	r22, r14
     626:	0e 94 af 08 	call	0x115e	; 0x115e <__fixsfsi>
     62a:	dc 01       	movw	r26, r24
     62c:	cb 01       	movw	r24, r22
     62e:	0e 94 95 02 	call	0x52a	; 0x52a <putIntXBee>

	return;
}
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	ff 90       	pop	r15
     63c:	ef 90       	pop	r14
     63e:	08 95       	ret

00000640 <OptSensorWrite>:
*
*****************************/

void OptSensorWrite(uint8_t addr, uint8_t data)
{
	SPDR = addr | 0x80;
     640:	80 68       	ori	r24, 0x80	; 128
     642:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
     644:	0d b4       	in	r0, 0x2d	; 45
     646:	07 fe       	sbrs	r0, 7
     648:	fd cf       	rjmp	.-6      	; 0x644 <OptSensorWrite+0x4>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     64a:	80 e5       	ldi	r24, 0x50	; 80
     64c:	8a 95       	dec	r24
     64e:	f1 f7       	brne	.-4      	; 0x64c <OptSensorWrite+0xc>

	_delay_us(30.0);

	SPDR = data;
     650:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & _BV(SPIF)));
     652:	0d b4       	in	r0, 0x2d	; 45
     654:	07 fe       	sbrs	r0, 7
     656:	fd cf       	rjmp	.-6      	; 0x652 <OptSensorWrite+0x12>
     658:	80 e5       	ldi	r24, 0x50	; 80
     65a:	8a 95       	dec	r24
     65c:	f1 f7       	brne	.-4      	; 0x65a <OptSensorWrite+0x1a>
	_delay_us(30.0);
}
     65e:	08 95       	ret

00000660 <OptSensorRead>:
*
*****************************/
uint8_t OptSensorRead(uint8_t addr)
{
	uint8_t data = 0;
	SPDR = addr;
     660:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF))); // Wait for Send
     662:	0d b4       	in	r0, 0x2d	; 45
     664:	07 fe       	sbrs	r0, 7
     666:	fd cf       	rjmp	.-6      	; 0x662 <OptSensorRead+0x2>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     668:	88 ec       	ldi	r24, 0xC8	; 200
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	01 97       	sbiw	r24, 0x01	; 1
     66e:	f1 f7       	brne	.-4      	; 0x66c <OptSensorRead+0xc>
	_delay_us(100);
	SPDR = 0;
     670:	1e bc       	out	0x2e, r1	; 46

	while(!(SPSR & _BV(SPIF))); // Wait for Receive
     672:	0d b4       	in	r0, 0x2d	; 45
     674:	07 fe       	sbrs	r0, 7
     676:	fd cf       	rjmp	.-6      	; 0x672 <OptSensorRead+0x12>
	data = SPDR;
     678:	8e b5       	in	r24, 0x2e	; 46
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     67a:	90 e5       	ldi	r25, 0x50	; 80
     67c:	9a 95       	dec	r25
     67e:	f1 f7       	brne	.-4      	; 0x67c <OptSensorRead+0x1c>
	_delay_us(30);
	return data;
}
     680:	08 95       	ret

00000682 <initOptSensor>:
*****************************/

void initOptSensor()
{
	//Setup SPI
	PRR &= ~_BV(PRSPI); //enable in PRR
     682:	80 91 64 00 	lds	r24, 0x0064
     686:	8b 7f       	andi	r24, 0xFB	; 251
     688:	80 93 64 00 	sts	0x0064, r24
	SPCR = _BV(SPE) | _BV(MSTR) | _BV(CPOL) | _BV(SPR0) | _BV(SPR1) | _BV(CPHA);
     68c:	8f e5       	ldi	r24, 0x5F	; 95
     68e:	8c bd       	out	0x2c, r24	; 44

	// Initialize Sensor
	OptSensorWrite(0x80, 0x80); // Addr = Config + MSB(WRITE) // POST
     690:	80 e8       	ldi	r24, 0x80	; 128
     692:	60 e8       	ldi	r22, 0x80	; 128
     694:	0e 94 20 03 	call	0x640	; 0x640 <OptSensorWrite>
     698:	80 e1       	ldi	r24, 0x10	; 16
     69a:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     69c:	28 ec       	ldi	r18, 0xC8	; 200
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	f9 01       	movw	r30, r18
     6a2:	31 97       	sbiw	r30, 0x01	; 1
     6a4:	f1 f7       	brne	.-4      	; 0x6a2 <initOptSensor+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6a8:	d9 f7       	brne	.-10     	; 0x6a0 <initOptSensor+0x1e>
	_delay_ms(1000.0);
	OptSensorRead(DELTA_Y); // Read Delta_Y
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	0e 94 30 03 	call	0x660	; 0x660 <OptSensorRead>
	OptSensorRead(DELTA_X); // Read Delta_X
     6b0:	83 e0       	ldi	r24, 0x03	; 3
     6b2:	0e 94 30 03 	call	0x660	; 0x660 <OptSensorRead>
}
     6b6:	08 95       	ret

000006b8 <SetLED>:
* User LED Jumper Must Be Bridged
* See Header for State Defines
*****************************/
void SetLED(uint8_t state)
{
	if(state == ON)
     6b8:	81 30       	cpi	r24, 0x01	; 1
     6ba:	11 f4       	brne	.+4      	; 0x6c0 <SetLED+0x8>
		PORTA |= _BV(PA6);
     6bc:	16 9a       	sbi	0x02, 6	; 2
     6be:	08 95       	ret
	else
		PORTA &= ~_BV(PA6);
     6c0:	16 98       	cbi	0x02, 6	; 2
     6c2:	08 95       	ret

000006c4 <SetMotor>:
* See Header for Motor and Direction Defines
*
**************************************************/
void SetMotor(uint8_t motnum, uint8_t dir)
{
    if(motnum == B_MOT)
     6c4:	88 23       	and	r24, r24
     6c6:	91 f4       	brne	.+36     	; 0x6ec <SetMotor+0x28>
	{
		if(dir == FWD)
     6c8:	61 30       	cpi	r22, 0x01	; 1
     6ca:	21 f4       	brne	.+8      	; 0x6d4 <SetMotor+0x10>
		{
			// Enable Both Motors
			PORTB |= _BV(PB3);
     6cc:	2b 9a       	sbi	0x05, 3	; 5
			PORTB |= _BV(PB4);
     6ce:	2c 9a       	sbi	0x05, 4	; 5

			// Set Forward
			PORTB |= _BV(PB0);
     6d0:	28 9a       	sbi	0x05, 0	; 5
     6d2:	23 c0       	rjmp	.+70     	; 0x71a <SetMotor+0x56>
			PORTB |= _BV(PB1);
		}

		if(dir == REV)
     6d4:	66 23       	and	r22, r22
     6d6:	21 f4       	brne	.+8      	; 0x6e0 <SetMotor+0x1c>
		{
			// Enable Both Motors
			PORTB |= _BV(PB3);
     6d8:	2b 9a       	sbi	0x05, 3	; 5
			PORTB |= _BV(PB4);
     6da:	2c 9a       	sbi	0x05, 4	; 5

			// Set Reverse
			PORTB &= ~_BV(PB0);
     6dc:	28 98       	cbi	0x05, 0	; 5
     6de:	22 c0       	rjmp	.+68     	; 0x724 <SetMotor+0x60>
			PORTB &= ~_BV(PB1);
		}

		if(dir == BRAKE)
     6e0:	62 30       	cpi	r22, 0x02	; 2
     6e2:	11 f0       	breq	.+4      	; 0x6e8 <SetMotor+0x24>
			// Disable Both Motors
			PORTB &= ~_BV(PB3);
			PORTB &= ~_BV(PB4);
		}

		if(dir == STOP)
     6e4:	63 30       	cpi	r22, 0x03	; 3
     6e6:	39 f5       	brne	.+78     	; 0x736 <SetMotor+0x72>
		{
			// Disable Both Motors
			PORTB &= ~_BV(PB3);
     6e8:	2b 98       	cbi	0x05, 3	; 5
     6ea:	20 c0       	rjmp	.+64     	; 0x72c <SetMotor+0x68>
			PORTB &= ~_BV(PB4);
		}
	}

	if(motnum == L_MOT)
     6ec:	81 30       	cpi	r24, 0x01	; 1
     6ee:	81 f4       	brne	.+32     	; 0x710 <SetMotor+0x4c>
	{
		if(dir == FWD)
     6f0:	61 30       	cpi	r22, 0x01	; 1
     6f2:	19 f4       	brne	.+6      	; 0x6fa <SetMotor+0x36>
		{
			PORTB |= _BV(PB3); // Enable Motor 1
     6f4:	2b 9a       	sbi	0x05, 3	; 5
			PORTB |= _BV(PB0); // Motor 1 Fwd
     6f6:	28 9a       	sbi	0x05, 0	; 5
     6f8:	08 95       	ret
		}

		if(dir == REV)
     6fa:	66 23       	and	r22, r22
     6fc:	19 f4       	brne	.+6      	; 0x704 <SetMotor+0x40>
		{
			PORTB |= _BV(PB3); // Enable Motor 1
     6fe:	2b 9a       	sbi	0x05, 3	; 5
			PORTB &= ~_BV(PB0); // Motor 1 Rev
     700:	28 98       	cbi	0x05, 0	; 5
     702:	08 95       	ret
		}

		if(dir == BRAKE)
     704:	62 30       	cpi	r22, 0x02	; 2
     706:	11 f0       	breq	.+4      	; 0x70c <SetMotor+0x48>
		{
			PORTB &= ~_BV(PB3); // Disable Motor 1

		}

		if(dir == STOP)
     708:	63 30       	cpi	r22, 0x03	; 3
     70a:	a9 f4       	brne	.+42     	; 0x736 <SetMotor+0x72>
		{
			PORTB &= ~_BV(PB3); // Disable Motor 1
     70c:	2b 98       	cbi	0x05, 3	; 5
     70e:	08 95       	ret
		}
	}

	if(motnum == R_MOT)
     710:	82 30       	cpi	r24, 0x02	; 2
     712:	89 f4       	brne	.+34     	; 0x736 <SetMotor+0x72>
	{
		if(dir == FWD)
     714:	61 30       	cpi	r22, 0x01	; 1
     716:	19 f4       	brne	.+6      	; 0x71e <SetMotor+0x5a>
		{
			PORTB |= _BV(PB4); // Enable Motor 2
     718:	2c 9a       	sbi	0x05, 4	; 5
			PORTB |= _BV(PB1); // Motor 2 Fwd
     71a:	29 9a       	sbi	0x05, 1	; 5
     71c:	08 95       	ret
		}

		if(dir == REV) 
     71e:	66 23       	and	r22, r22
     720:	19 f4       	brne	.+6      	; 0x728 <SetMotor+0x64>
		{
			PORTB |= _BV(PB4); // Enable Motor 2
     722:	2c 9a       	sbi	0x05, 4	; 5
			PORTB &= ~_BV(PB1); // Motor 2 Rev
     724:	29 98       	cbi	0x05, 1	; 5
     726:	08 95       	ret
		}

		if(dir == BRAKE)
     728:	62 30       	cpi	r22, 0x02	; 2
     72a:	11 f4       	brne	.+4      	; 0x730 <SetMotor+0x6c>
		{
			PORTB &= ~_BV(PB4); // Disable Motor 2
     72c:	2c 98       	cbi	0x05, 4	; 5
     72e:	08 95       	ret

		}

		if(dir == STOP)
     730:	63 30       	cpi	r22, 0x03	; 3
     732:	09 f4       	brne	.+2      	; 0x736 <SetMotor+0x72>
		{
			PORTB &= ~_BV(PB4); // Disable Motor 2
     734:	2c 98       	cbi	0x05, 4	; 5
     736:	08 95       	ret

00000738 <SetMotorSpeed>:
* See Header for Motor and Direction Defines
* InitMotorPWM() must be called before using this function.
*****************************/
void SetMotorSpeed(uint8_t motnum, uint8_t dir, uint8_t level) // Set Motor Speed Using PWM
{
	if(motnum == B_MOT)
     738:	88 23       	and	r24, r24
     73a:	99 f4       	brne	.+38     	; 0x762 <SetMotorSpeed+0x2a>
	{
		if(dir == FWD)
     73c:	61 30       	cpi	r22, 0x01	; 1
     73e:	19 f4       	brne	.+6      	; 0x746 <SetMotorSpeed+0xe>
		{
			// Set Speed
			OCR0A = level; // Motor 1 Level
     740:	47 bd       	out	0x27, r20	; 39
			OCR0B = level; // Motor 2 Level
     742:	48 bd       	out	0x28, r20	; 40
     744:	0c c0       	rjmp	.+24     	; 0x75e <SetMotorSpeed+0x26>
				// Set Direction (Forward)
			PORTB |= _BV(PB0);
			PORTB |= _BV(PB1);
		}

		if(dir == REV) 
     746:	66 23       	and	r22, r22
     748:	21 f4       	brne	.+8      	; 0x752 <SetMotorSpeed+0x1a>
		{
				// Set Speed
			OCR0A = level; // Motor 1 Level
     74a:	47 bd       	out	0x27, r20	; 39
			OCR0B = level; // Motor 2 Level
     74c:	48 bd       	out	0x28, r20	; 40

				// Set Direction (Reverse)
			PORTB &= ~_BV(PB0);
     74e:	28 98       	cbi	0x05, 0	; 5
     750:	23 c0       	rjmp	.+70     	; 0x798 <SetMotorSpeed+0x60>
			PORTB &= ~_BV(PB1);
		}

		if(dir == BRAKE)
     752:	62 30       	cpi	r22, 0x02	; 2
     754:	11 f0       	breq	.+4      	; 0x75a <SetMotorSpeed+0x22>
				// Set Direction (Forward)
			PORTB |= _BV(PB0);
			PORTB |= _BV(PB1);
		}

		if(dir == STOP)
     756:	63 30       	cpi	r22, 0x03	; 3
     758:	51 f5       	brne	.+84     	; 0x7ae <SetMotorSpeed+0x76>
		{
				// Set Speed
			OCR0A = 0; // Motor 1 Level
     75a:	17 bc       	out	0x27, r1	; 39
			OCR0B = 0; // Motor 2 Level
     75c:	18 bc       	out	0x28, r1	; 40

				// Set Direction (Forward)
			PORTB |= _BV(PB0);
     75e:	28 9a       	sbi	0x05, 0	; 5
     760:	20 c0       	rjmp	.+64     	; 0x7a2 <SetMotorSpeed+0x6a>
			PORTB |= _BV(PB1);
		}
	}

	if(motnum == L_MOT)
     762:	81 30       	cpi	r24, 0x01	; 1
     764:	81 f4       	brne	.+32     	; 0x786 <SetMotorSpeed+0x4e>
	{
		if(dir == FWD)
     766:	61 30       	cpi	r22, 0x01	; 1
     768:	11 f4       	brne	.+4      	; 0x76e <SetMotorSpeed+0x36>
		{
			// Set Speed
			OCR0A = level; // Motor 1 Level
     76a:	47 bd       	out	0x27, r20	; 39
     76c:	0a c0       	rjmp	.+20     	; 0x782 <SetMotorSpeed+0x4a>
			
			// Set Direction (Forward)
			PORTB |= _BV(PB0);
		}

		if(dir == REV) 
     76e:	66 23       	and	r22, r22
     770:	19 f4       	brne	.+6      	; 0x778 <SetMotorSpeed+0x40>
		{
			// Set Speed
			OCR0A = level; // Motor 1 Level
     772:	47 bd       	out	0x27, r20	; 39
			
			// Set Direction (Forward)
			PORTB &= ~_BV(PB0);
     774:	28 98       	cbi	0x05, 0	; 5
     776:	08 95       	ret
		}

		if(dir == BRAKE)
     778:	62 30       	cpi	r22, 0x02	; 2
     77a:	11 f0       	breq	.+4      	; 0x780 <SetMotorSpeed+0x48>
			
			// Set Direction (Forward)
			PORTB |= _BV(PB0);
		}

		if(dir == STOP)
     77c:	63 30       	cpi	r22, 0x03	; 3
     77e:	b9 f4       	brne	.+46     	; 0x7ae <SetMotorSpeed+0x76>
		{
			// Set Speed
			OCR0A = 0; // Motor 1 Level
     780:	17 bc       	out	0x27, r1	; 39
			
			// Set Direction (Forward)
			PORTB |= _BV(PB0);
     782:	28 9a       	sbi	0x05, 0	; 5
     784:	08 95       	ret
		}
	}

	if(motnum == R_MOT)
     786:	82 30       	cpi	r24, 0x02	; 2
     788:	91 f4       	brne	.+36     	; 0x7ae <SetMotorSpeed+0x76>
	{
		if(dir == FWD)
     78a:	61 30       	cpi	r22, 0x01	; 1
     78c:	11 f4       	brne	.+4      	; 0x792 <SetMotorSpeed+0x5a>
		{
			// Set Speed
			OCR0B = level; // Motor 2 Level
     78e:	48 bd       	out	0x28, r20	; 40
     790:	08 c0       	rjmp	.+16     	; 0x7a2 <SetMotorSpeed+0x6a>

			// Set Direction (Forward)
			PORTB |= _BV(PB1);
		}

		if(dir == REV) 
     792:	66 23       	and	r22, r22
     794:	19 f4       	brne	.+6      	; 0x79c <SetMotorSpeed+0x64>
		{
			// Set Speed
			OCR0B = level; // Motor 2 Level
     796:	48 bd       	out	0x28, r20	; 40

			// Set Direction (Reverse)
			PORTB &= ~_BV(PB1);
     798:	29 98       	cbi	0x05, 1	; 5
     79a:	08 95       	ret
		}

		if(dir == BRAKE)
     79c:	62 30       	cpi	r22, 0x02	; 2
     79e:	19 f4       	brne	.+6      	; 0x7a6 <SetMotorSpeed+0x6e>
		{
			// Set Speed
			OCR0B = 0; // Motor 2 Level
     7a0:	18 bc       	out	0x28, r1	; 40

			// Set Direction (Forward)
			PORTB |= _BV(PB1);
     7a2:	29 9a       	sbi	0x05, 1	; 5
     7a4:	08 95       	ret
		}

		if(dir == STOP)
     7a6:	63 30       	cpi	r22, 0x03	; 3
     7a8:	11 f4       	brne	.+4      	; 0x7ae <SetMotorSpeed+0x76>
		{
			// Set Speed
			OCR0B = 0; // Motor 2 Level
     7aa:	18 bc       	out	0x28, r1	; 40

			// Set Direction (Forward)
			PORTB |= _BV(PB1);
     7ac:	29 9a       	sbi	0x05, 1	; 5
     7ae:	08 95       	ret

000007b0 <initClock>:
*****************************/
void initClock()
{
	unsigned char sreg_save;

	TCCR1A = 0;
     7b0:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = _BV(CS10) | _BV(CS12); // Set Clock at 0.001024 ticks/s for 1Mhz clock
     7b4:	85 e0       	ldi	r24, 0x05	; 5
     7b6:	80 93 81 00 	sts	0x0081, r24
	sreg_save = SREG;
     7ba:	8f b7       	in	r24, 0x3f	; 63
	cli();
     7bc:	f8 94       	cli
	TCNT1 = 0x0000;
     7be:	10 92 85 00 	sts	0x0085, r1
     7c2:	10 92 84 00 	sts	0x0084, r1
	SREG = sreg_save;
     7c6:	8f bf       	out	0x3f, r24	; 63
}
     7c8:	08 95       	ret

000007ca <getTimeElapsed>:
int getTimeElapsed()
{
	int i;
	unsigned char sreg_save;

	sreg_save = SREG;
     7ca:	8f b7       	in	r24, 0x3f	; 63
	cli();
     7cc:	f8 94       	cli
	i = TCNT1; // Get Current Clock Value
     7ce:	e4 e8       	ldi	r30, 0x84	; 132
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	20 81       	ld	r18, Z
     7d4:	31 81       	ldd	r19, Z+1	; 0x01
	TCNT1 = 0; // Reset Clock
     7d6:	11 82       	std	Z+1, r1	; 0x01
     7d8:	10 82       	st	Z, r1
	SREG = sreg_save;
     7da:	8f bf       	out	0x3f, r24	; 63
	return i;
}
     7dc:	c9 01       	movw	r24, r18
     7de:	08 95       	ret

000007e0 <printAllXBee>:
* - ADD '\0' TO END OF STRING TO 
*    PREVENT ISSUES
*****************************/

void printAllXBee(const unsigned char *c, double var, ...)
{
     7e0:	6f 92       	push	r6
     7e2:	7f 92       	push	r7
     7e4:	8f 92       	push	r8
     7e6:	9f 92       	push	r9
     7e8:	af 92       	push	r10
     7ea:	bf 92       	push	r11
     7ec:	cf 92       	push	r12
     7ee:	df 92       	push	r13
     7f0:	ef 92       	push	r14
     7f2:	ff 92       	push	r15
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	df 93       	push	r29
     7fa:	cf 93       	push	r28
     7fc:	0f 92       	push	r0
     7fe:	cd b7       	in	r28, 0x3d	; 61
     800:	de b7       	in	r29, 0x3e	; 62
     802:	6a 88       	ldd	r6, Y+18	; 0x12
     804:	7b 88       	ldd	r7, Y+19	; 0x13
     806:	8c 88       	ldd	r8, Y+20	; 0x14
     808:	9d 88       	ldd	r9, Y+21	; 0x15
     80a:	ae 88       	ldd	r10, Y+22	; 0x16
     80c:	bf 88       	ldd	r11, Y+23	; 0x17
     80e:	68 e1       	ldi	r22, 0x18	; 24
     810:	e6 2e       	mov	r14, r22
     812:	f1 2c       	mov	r15, r1
     814:	ec 0e       	add	r14, r28
     816:	fd 1e       	adc	r15, r29
     818:	cc 24       	eor	r12, r12
     81a:	dd 24       	eor	r13, r13
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	64 c0       	rjmp	.+200    	; 0x8e8 <printAllXBee+0x108>

	while(c[i] != '\0')
	{
		while(c[i] != '%' && c[i] != '\0')
		{
			putCharXBee(c[i]);
     820:	99 83       	std	Y+1, r25	; 0x01
     822:	0e 94 89 02 	call	0x512	; 0x512 <putCharXBee>
			i++;
     826:	08 94       	sec
     828:	c1 1c       	adc	r12, r1
     82a:	d1 1c       	adc	r13, r1
     82c:	99 81       	ldd	r25, Y+1	; 0x01
	int i = 0;
	uint8_t j = 0;

	while(c[i] != '\0')
	{
		while(c[i] != '%' && c[i] != '\0')
     82e:	f8 01       	movw	r30, r16
     830:	80 81       	ld	r24, Z
     832:	85 32       	cpi	r24, 0x25	; 37
     834:	29 f0       	breq	.+10     	; 0x840 <printAllXBee+0x60>
     836:	0f 5f       	subi	r16, 0xFF	; 255
     838:	1f 4f       	sbci	r17, 0xFF	; 255
     83a:	88 23       	and	r24, r24
     83c:	89 f7       	brne	.-30     	; 0x820 <printAllXBee+0x40>
     83e:	51 c0       	rjmp	.+162    	; 0x8e2 <printAllXBee+0x102>
			putCharXBee(c[i]);
			i++;
		}
		if(c[i] == '%')
		{
			i++;
     840:	08 94       	sec
     842:	c1 1c       	adc	r12, r1
     844:	d1 1c       	adc	r13, r1

			switch(c[i])
     846:	83 01       	movw	r16, r6
     848:	0c 0d       	add	r16, r12
     84a:	1d 1d       	adc	r17, r13
     84c:	f8 01       	movw	r30, r16
     84e:	80 81       	ld	r24, Z
     850:	84 36       	cpi	r24, 0x64	; 100
     852:	29 f0       	breq	.+10     	; 0x85e <printAllXBee+0x7e>
     854:	86 36       	cpi	r24, 0x66	; 102
     856:	41 f1       	breq	.+80     	; 0x8a8 <printAllXBee+0xc8>
     858:	83 36       	cpi	r24, 0x63	; 99
     85a:	c9 f5       	brne	.+114    	; 0x8ce <printAllXBee+0xee>
     85c:	14 c0       	rjmp	.+40     	; 0x886 <printAllXBee+0xa6>
			{
				case 'd':
					if(j==0)  putIntXBee((int)var);
     85e:	99 23       	and	r25, r25
     860:	49 f4       	brne	.+18     	; 0x874 <printAllXBee+0x94>
     862:	c5 01       	movw	r24, r10
     864:	b4 01       	movw	r22, r8
     866:	0e 94 af 08 	call	0x115e	; 0x115e <__fixsfsi>
     86a:	dc 01       	movw	r26, r24
     86c:	cb 01       	movw	r24, r22
     86e:	0e 94 95 02 	call	0x52a	; 0x52a <putIntXBee>
     872:	36 c0       	rjmp	.+108    	; 0x8e0 <printAllXBee+0x100>
					else putIntXBee((int)(va_arg(ls2,int)));
     874:	87 01       	movw	r16, r14
     876:	0e 5f       	subi	r16, 0xFE	; 254
     878:	1f 4f       	sbci	r17, 0xFF	; 255
     87a:	f7 01       	movw	r30, r14
     87c:	80 81       	ld	r24, Z
     87e:	91 81       	ldd	r25, Z+1	; 0x01
     880:	0e 94 95 02 	call	0x52a	; 0x52a <putIntXBee>
     884:	22 c0       	rjmp	.+68     	; 0x8ca <printAllXBee+0xea>
					break;
				case 'c':

					if(j==0)  putCharXBee((unsigned int)var);
     886:	99 23       	and	r25, r25
     888:	39 f4       	brne	.+14     	; 0x898 <printAllXBee+0xb8>
     88a:	c5 01       	movw	r24, r10
     88c:	b4 01       	movw	r22, r8
     88e:	0e 94 21 05 	call	0xa42	; 0xa42 <__fixunssfsi>
     892:	dc 01       	movw	r26, r24
     894:	cb 01       	movw	r24, r22
     896:	22 c0       	rjmp	.+68     	; 0x8dc <printAllXBee+0xfc>
					else putCharXBee(va_arg(ls2,unsigned int));
     898:	87 01       	movw	r16, r14
     89a:	0e 5f       	subi	r16, 0xFE	; 254
     89c:	1f 4f       	sbci	r17, 0xFF	; 255
     89e:	f7 01       	movw	r30, r14
     8a0:	80 81       	ld	r24, Z
     8a2:	0e 94 89 02 	call	0x512	; 0x512 <putCharXBee>
     8a6:	11 c0       	rjmp	.+34     	; 0x8ca <printAllXBee+0xea>
					break;
				case 'f':
					if(j==0)  putFloatXBee((double)var);
     8a8:	99 23       	and	r25, r25
     8aa:	29 f4       	brne	.+10     	; 0x8b6 <printAllXBee+0xd6>
     8ac:	c5 01       	movw	r24, r10
     8ae:	b4 01       	movw	r22, r8
     8b0:	0e 94 df 02 	call	0x5be	; 0x5be <putFloatXBee>
     8b4:	15 c0       	rjmp	.+42     	; 0x8e0 <printAllXBee+0x100>
					else putFloatXBee((double)va_arg(ls2,double));
     8b6:	87 01       	movw	r16, r14
     8b8:	0c 5f       	subi	r16, 0xFC	; 252
     8ba:	1f 4f       	sbci	r17, 0xFF	; 255
     8bc:	f7 01       	movw	r30, r14
     8be:	60 81       	ld	r22, Z
     8c0:	71 81       	ldd	r23, Z+1	; 0x01
     8c2:	82 81       	ldd	r24, Z+2	; 0x02
     8c4:	93 81       	ldd	r25, Z+3	; 0x03
     8c6:	0e 94 df 02 	call	0x5be	; 0x5be <putFloatXBee>
     8ca:	78 01       	movw	r14, r16
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <printAllXBee+0x100>
					break;
				default:
					putCharXBee(c[i-1]);
     8ce:	f8 01       	movw	r30, r16
     8d0:	31 97       	sbiw	r30, 0x01	; 1
     8d2:	80 81       	ld	r24, Z
     8d4:	0e 94 89 02 	call	0x512	; 0x512 <putCharXBee>
					putCharXBee(c[i]);
     8d8:	f8 01       	movw	r30, r16
     8da:	80 81       	ld	r24, Z
     8dc:	0e 94 89 02 	call	0x512	; 0x512 <putCharXBee>
     8e0:	91 e0       	ldi	r25, 0x01	; 1
			}
			j=1;
		}

		i++;
     8e2:	08 94       	sec
     8e4:	c1 1c       	adc	r12, r1
     8e6:	d1 1c       	adc	r13, r1
	va_list ls2;
	va_start(ls2,var);
	int i = 0;
	uint8_t j = 0;

	while(c[i] != '\0')
     8e8:	f3 01       	movw	r30, r6
     8ea:	ec 0d       	add	r30, r12
     8ec:	fd 1d       	adc	r31, r13
     8ee:	80 81       	ld	r24, Z
     8f0:	88 23       	and	r24, r24
     8f2:	11 f0       	breq	.+4      	; 0x8f8 <printAllXBee+0x118>
     8f4:	8f 01       	movw	r16, r30
     8f6:	9b cf       	rjmp	.-202    	; 0x82e <printAllXBee+0x4e>
		}

		i++;

	}
	putCharXBee('\r');
     8f8:	8d e0       	ldi	r24, 0x0D	; 13
     8fa:	0e 94 89 02 	call	0x512	; 0x512 <putCharXBee>
	putCharXBee('\n');
     8fe:	8a e0       	ldi	r24, 0x0A	; 10
     900:	0e 94 89 02 	call	0x512	; 0x512 <putCharXBee>
	va_end(ls2);
	return;
}
     904:	0f 90       	pop	r0
     906:	cf 91       	pop	r28
     908:	df 91       	pop	r29
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	df 90       	pop	r13
     914:	cf 90       	pop	r12
     916:	bf 90       	pop	r11
     918:	af 90       	pop	r10
     91a:	9f 90       	pop	r9
     91c:	8f 90       	pop	r8
     91e:	7f 90       	pop	r7
     920:	6f 90       	pop	r6
     922:	08 95       	ret

00000924 <initPWM>:
* initPWM(A0,B0,B2);
**********************************************/


void initPWM(int val, ...)
{
     924:	df 93       	push	r29
     926:	cf 93       	push	r28
     928:	cd b7       	in	r28, 0x3d	; 61
     92a:	de b7       	in	r29, 0x3e	; 62
     92c:	ce 01       	movw	r24, r28
     92e:	07 96       	adiw	r24, 0x07	; 7
     930:	fc 01       	movw	r30, r24
     932:	2d 81       	ldd	r18, Y+5	; 0x05
     934:	3e 81       	ldd	r19, Y+6	; 0x06
     936:	c9 01       	movw	r24, r18
				break;
			case A1:
				DDRD |= _BV(DDD4); //set OCR1A output
				TCCR1A |= _BV(WGM10) | _BV(COM1A1);
				TCCR1B |= _BV(CS11);
				OCR1A = 255;
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	50 e0       	ldi	r21, 0x00	; 0
				break;
			case A2:
				DDRD |= _BV(DDD7); //set OCR2A output
				TCCR2A |= _BV(WGM20) | _BV(COM2A1);
				TCCR2B |= _BV(CS21);
				OCR2A = 255;
     93c:	2f ef       	ldi	r18, 0xFF	; 255
     93e:	66 c0       	rjmp	.+204    	; 0xa0c <initPWM+0xe8>
	va_start(va,val);
  int j = val;
	for(j = val;j != -1; j = va_arg(va,int))
	{
		
		switch(j)
     940:	83 30       	cpi	r24, 0x03	; 3
     942:	91 05       	cpc	r25, r1
     944:	31 f1       	breq	.+76     	; 0x992 <initPWM+0x6e>
     946:	84 30       	cpi	r24, 0x04	; 4
     948:	91 05       	cpc	r25, r1
     94a:	3c f4       	brge	.+14     	; 0x95a <initPWM+0x36>
     94c:	81 30       	cpi	r24, 0x01	; 1
     94e:	91 05       	cpc	r25, r1
     950:	71 f0       	breq	.+28     	; 0x96e <initPWM+0x4a>
     952:	02 97       	sbiw	r24, 0x02	; 2
     954:	09 f0       	breq	.+2      	; 0x958 <initPWM+0x34>
     956:	58 c0       	rjmp	.+176    	; 0xa08 <initPWM+0xe4>
     958:	13 c0       	rjmp	.+38     	; 0x980 <initPWM+0x5c>
     95a:	85 30       	cpi	r24, 0x05	; 5
     95c:	91 05       	cpc	r25, r1
     95e:	c9 f1       	breq	.+114    	; 0x9d2 <initPWM+0xae>
     960:	85 30       	cpi	r24, 0x05	; 5
     962:	91 05       	cpc	r25, r1
     964:	34 f1       	brlt	.+76     	; 0x9b2 <initPWM+0x8e>
     966:	06 97       	sbiw	r24, 0x06	; 6
     968:	09 f0       	breq	.+2      	; 0x96c <initPWM+0x48>
     96a:	4e c0       	rjmp	.+156    	; 0xa08 <initPWM+0xe4>
     96c:	40 c0       	rjmp	.+128    	; 0x9ee <initPWM+0xca>
		{
			case A0:
				DDRB |= _BV(DDB3); //set OCR0A output
     96e:	23 9a       	sbi	0x04, 3	; 4
				TCCR0A |= _BV(WGM00) | _BV(COM0A1);
     970:	84 b5       	in	r24, 0x24	; 36
     972:	81 68       	ori	r24, 0x81	; 129
     974:	84 bd       	out	0x24, r24	; 36
				TCCR0B |= _BV(CS01);
     976:	85 b5       	in	r24, 0x25	; 37
     978:	82 60       	ori	r24, 0x02	; 2
     97a:	85 bd       	out	0x25, r24	; 37
				OCR0A = 255;
     97c:	27 bd       	out	0x27, r18	; 39
     97e:	44 c0       	rjmp	.+136    	; 0xa08 <initPWM+0xe4>
				break;
			case B0:
				DDRB |= _BV(DDB4); //set OCR0A output
     980:	24 9a       	sbi	0x04, 4	; 4
				TCCR0A |= _BV(WGM00) | _BV(COM0B1);
     982:	84 b5       	in	r24, 0x24	; 36
     984:	81 62       	ori	r24, 0x21	; 33
     986:	84 bd       	out	0x24, r24	; 36
				TCCR0B |= _BV(CS01);
     988:	85 b5       	in	r24, 0x25	; 37
     98a:	82 60       	ori	r24, 0x02	; 2
     98c:	85 bd       	out	0x25, r24	; 37
				OCR0B = 255;
     98e:	28 bd       	out	0x28, r18	; 40
     990:	3b c0       	rjmp	.+118    	; 0xa08 <initPWM+0xe4>
				break;
			case A1:
				DDRD |= _BV(DDD4); //set OCR1A output
     992:	54 9a       	sbi	0x0a, 4	; 10
				TCCR1A |= _BV(WGM10) | _BV(COM1A1);
     994:	80 91 80 00 	lds	r24, 0x0080
     998:	81 68       	ori	r24, 0x81	; 129
     99a:	80 93 80 00 	sts	0x0080, r24
				TCCR1B |= _BV(CS11);
     99e:	80 91 81 00 	lds	r24, 0x0081
     9a2:	82 60       	ori	r24, 0x02	; 2
     9a4:	80 93 81 00 	sts	0x0081, r24
				OCR1A = 255;
     9a8:	50 93 89 00 	sts	0x0089, r21
     9ac:	40 93 88 00 	sts	0x0088, r20
     9b0:	2b c0       	rjmp	.+86     	; 0xa08 <initPWM+0xe4>
				break;
			case B1:
				DDRD |= _BV(DDD5); //set OCR1A output
     9b2:	55 9a       	sbi	0x0a, 5	; 10
				TCCR1A |= _BV(WGM10) | _BV(COM1B1);
     9b4:	80 91 80 00 	lds	r24, 0x0080
     9b8:	81 62       	ori	r24, 0x21	; 33
     9ba:	80 93 80 00 	sts	0x0080, r24
				TCCR1B |= _BV(CS11);
     9be:	80 91 81 00 	lds	r24, 0x0081
     9c2:	82 60       	ori	r24, 0x02	; 2
     9c4:	80 93 81 00 	sts	0x0081, r24
				OCR1B = 255;
     9c8:	50 93 8b 00 	sts	0x008B, r21
     9cc:	40 93 8a 00 	sts	0x008A, r20
     9d0:	1b c0       	rjmp	.+54     	; 0xa08 <initPWM+0xe4>
				break;
			case A2:
				DDRD |= _BV(DDD7); //set OCR2A output
     9d2:	57 9a       	sbi	0x0a, 7	; 10
				TCCR2A |= _BV(WGM20) | _BV(COM2A1);
     9d4:	80 91 b0 00 	lds	r24, 0x00B0
     9d8:	81 68       	ori	r24, 0x81	; 129
     9da:	80 93 b0 00 	sts	0x00B0, r24
				TCCR2B |= _BV(CS21);
     9de:	80 91 b1 00 	lds	r24, 0x00B1
     9e2:	82 60       	ori	r24, 0x02	; 2
     9e4:	80 93 b1 00 	sts	0x00B1, r24
				OCR2A = 255;
     9e8:	20 93 b3 00 	sts	0x00B3, r18
     9ec:	0d c0       	rjmp	.+26     	; 0xa08 <initPWM+0xe4>
				break;
			case B2:
				DDRD |= _BV(DDD6); //set OCR2B output
     9ee:	56 9a       	sbi	0x0a, 6	; 10
				TCCR2A |= _BV(WGM20) | _BV(COM2B1);
     9f0:	80 91 b0 00 	lds	r24, 0x00B0
     9f4:	81 62       	ori	r24, 0x21	; 33
     9f6:	80 93 b0 00 	sts	0x00B0, r24
				TCCR2B |= _BV(CS21);
     9fa:	80 91 b1 00 	lds	r24, 0x00B1
     9fe:	82 60       	ori	r24, 0x02	; 2
     a00:	80 93 b1 00 	sts	0x00B1, r24
				OCR2B = 255;
     a04:	20 93 b4 00 	sts	0x00B4, r18
void initPWM(int val, ...)
{
	va_list va;
	va_start(va,val);
  int j = val;
	for(j = val;j != -1; j = va_arg(va,int))
     a08:	81 91       	ld	r24, Z+
     a0a:	91 91       	ld	r25, Z+
     a0c:	3f ef       	ldi	r19, 0xFF	; 255
     a0e:	8f 3f       	cpi	r24, 0xFF	; 255
     a10:	93 07       	cpc	r25, r19
     a12:	09 f0       	breq	.+2      	; 0xa16 <initPWM+0xf2>
     a14:	95 cf       	rjmp	.-214    	; 0x940 <initPWM+0x1c>
		}
	}

	va_end(va);
	return;
}
     a16:	cf 91       	pop	r28
     a18:	df 91       	pop	r29
     a1a:	08 95       	ret

00000a1c <InitMotorPWM>:
* 
*  
*****************************/
void InitMotorPWM()
{
	initPWM(A0, B0);
     a1c:	00 d0       	rcall	.+0      	; 0xa1e <InitMotorPWM+0x2>
     a1e:	00 d0       	rcall	.+0      	; 0xa20 <InitMotorPWM+0x4>
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	ed b7       	in	r30, 0x3d	; 61
     a26:	fe b7       	in	r31, 0x3e	; 62
     a28:	92 83       	std	Z+2, r25	; 0x02
     a2a:	81 83       	std	Z+1, r24	; 0x01
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	94 83       	std	Z+4, r25	; 0x04
     a32:	83 83       	std	Z+3, r24	; 0x03
     a34:	0e 94 92 04 	call	0x924	; 0x924 <initPWM>
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
}
     a40:	08 95       	ret

00000a42 <__fixunssfsi>:
     a42:	ef 92       	push	r14
     a44:	ff 92       	push	r15
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	7b 01       	movw	r14, r22
     a4c:	8c 01       	movw	r16, r24
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	5f e4       	ldi	r21, 0x4F	; 79
     a56:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__gesf2>
     a5a:	88 23       	and	r24, r24
     a5c:	8c f0       	brlt	.+34     	; 0xa80 <__fixunssfsi+0x3e>
     a5e:	c8 01       	movw	r24, r16
     a60:	b7 01       	movw	r22, r14
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	5f e4       	ldi	r21, 0x4F	; 79
     a6a:	0e 94 99 06 	call	0xd32	; 0xd32 <__subsf3>
     a6e:	0e 94 af 08 	call	0x115e	; 0x115e <__fixsfsi>
     a72:	9b 01       	movw	r18, r22
     a74:	ac 01       	movw	r20, r24
     a76:	20 50       	subi	r18, 0x00	; 0
     a78:	30 40       	sbci	r19, 0x00	; 0
     a7a:	40 40       	sbci	r20, 0x00	; 0
     a7c:	50 48       	sbci	r21, 0x80	; 128
     a7e:	06 c0       	rjmp	.+12     	; 0xa8c <__fixunssfsi+0x4a>
     a80:	c8 01       	movw	r24, r16
     a82:	b7 01       	movw	r22, r14
     a84:	0e 94 af 08 	call	0x115e	; 0x115e <__fixsfsi>
     a88:	9b 01       	movw	r18, r22
     a8a:	ac 01       	movw	r20, r24
     a8c:	b9 01       	movw	r22, r18
     a8e:	ca 01       	movw	r24, r20
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	ff 90       	pop	r15
     a96:	ef 90       	pop	r14
     a98:	08 95       	ret

00000a9a <_fpadd_parts>:
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e3 e5       	ldi	r30, 0x53	; 83
     aa0:	f5 e0       	ldi	r31, 0x05	; 5
     aa2:	0c 94 85 0b 	jmp	0x170a	; 0x170a <__prologue_saves__>
     aa6:	dc 01       	movw	r26, r24
     aa8:	2b 01       	movw	r4, r22
     aaa:	fa 01       	movw	r30, r20
     aac:	9c 91       	ld	r25, X
     aae:	92 30       	cpi	r25, 0x02	; 2
     ab0:	08 f4       	brcc	.+2      	; 0xab4 <_fpadd_parts+0x1a>
     ab2:	39 c1       	rjmp	.+626    	; 0xd26 <_fpadd_parts+0x28c>
     ab4:	eb 01       	movw	r28, r22
     ab6:	88 81       	ld	r24, Y
     ab8:	82 30       	cpi	r24, 0x02	; 2
     aba:	08 f4       	brcc	.+2      	; 0xabe <_fpadd_parts+0x24>
     abc:	33 c1       	rjmp	.+614    	; 0xd24 <_fpadd_parts+0x28a>
     abe:	94 30       	cpi	r25, 0x04	; 4
     ac0:	69 f4       	brne	.+26     	; 0xadc <_fpadd_parts+0x42>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	09 f0       	breq	.+2      	; 0xac8 <_fpadd_parts+0x2e>
     ac6:	2f c1       	rjmp	.+606    	; 0xd26 <_fpadd_parts+0x28c>
     ac8:	11 96       	adiw	r26, 0x01	; 1
     aca:	9c 91       	ld	r25, X
     acc:	11 97       	sbiw	r26, 0x01	; 1
     ace:	89 81       	ldd	r24, Y+1	; 0x01
     ad0:	98 17       	cp	r25, r24
     ad2:	09 f4       	brne	.+2      	; 0xad6 <_fpadd_parts+0x3c>
     ad4:	28 c1       	rjmp	.+592    	; 0xd26 <_fpadd_parts+0x28c>
     ad6:	a9 e6       	ldi	r26, 0x69	; 105
     ad8:	b1 e0       	ldi	r27, 0x01	; 1
     ada:	25 c1       	rjmp	.+586    	; 0xd26 <_fpadd_parts+0x28c>
     adc:	84 30       	cpi	r24, 0x04	; 4
     ade:	09 f4       	brne	.+2      	; 0xae2 <_fpadd_parts+0x48>
     ae0:	21 c1       	rjmp	.+578    	; 0xd24 <_fpadd_parts+0x28a>
     ae2:	82 30       	cpi	r24, 0x02	; 2
     ae4:	a9 f4       	brne	.+42     	; 0xb10 <_fpadd_parts+0x76>
     ae6:	92 30       	cpi	r25, 0x02	; 2
     ae8:	09 f0       	breq	.+2      	; 0xaec <_fpadd_parts+0x52>
     aea:	1d c1       	rjmp	.+570    	; 0xd26 <_fpadd_parts+0x28c>
     aec:	9a 01       	movw	r18, r20
     aee:	ad 01       	movw	r20, r26
     af0:	88 e0       	ldi	r24, 0x08	; 8
     af2:	ea 01       	movw	r28, r20
     af4:	09 90       	ld	r0, Y+
     af6:	ae 01       	movw	r20, r28
     af8:	e9 01       	movw	r28, r18
     afa:	09 92       	st	Y+, r0
     afc:	9e 01       	movw	r18, r28
     afe:	81 50       	subi	r24, 0x01	; 1
     b00:	c1 f7       	brne	.-16     	; 0xaf2 <_fpadd_parts+0x58>
     b02:	e2 01       	movw	r28, r4
     b04:	89 81       	ldd	r24, Y+1	; 0x01
     b06:	11 96       	adiw	r26, 0x01	; 1
     b08:	9c 91       	ld	r25, X
     b0a:	89 23       	and	r24, r25
     b0c:	81 83       	std	Z+1, r24	; 0x01
     b0e:	08 c1       	rjmp	.+528    	; 0xd20 <_fpadd_parts+0x286>
     b10:	92 30       	cpi	r25, 0x02	; 2
     b12:	09 f4       	brne	.+2      	; 0xb16 <_fpadd_parts+0x7c>
     b14:	07 c1       	rjmp	.+526    	; 0xd24 <_fpadd_parts+0x28a>
     b16:	12 96       	adiw	r26, 0x02	; 2
     b18:	2d 90       	ld	r2, X+
     b1a:	3c 90       	ld	r3, X
     b1c:	13 97       	sbiw	r26, 0x03	; 3
     b1e:	eb 01       	movw	r28, r22
     b20:	8a 81       	ldd	r24, Y+2	; 0x02
     b22:	9b 81       	ldd	r25, Y+3	; 0x03
     b24:	14 96       	adiw	r26, 0x04	; 4
     b26:	ad 90       	ld	r10, X+
     b28:	bd 90       	ld	r11, X+
     b2a:	cd 90       	ld	r12, X+
     b2c:	dc 90       	ld	r13, X
     b2e:	17 97       	sbiw	r26, 0x07	; 7
     b30:	ec 80       	ldd	r14, Y+4	; 0x04
     b32:	fd 80       	ldd	r15, Y+5	; 0x05
     b34:	0e 81       	ldd	r16, Y+6	; 0x06
     b36:	1f 81       	ldd	r17, Y+7	; 0x07
     b38:	91 01       	movw	r18, r2
     b3a:	28 1b       	sub	r18, r24
     b3c:	39 0b       	sbc	r19, r25
     b3e:	b9 01       	movw	r22, r18
     b40:	37 ff       	sbrs	r19, 7
     b42:	04 c0       	rjmp	.+8      	; 0xb4c <_fpadd_parts+0xb2>
     b44:	66 27       	eor	r22, r22
     b46:	77 27       	eor	r23, r23
     b48:	62 1b       	sub	r22, r18
     b4a:	73 0b       	sbc	r23, r19
     b4c:	60 32       	cpi	r22, 0x20	; 32
     b4e:	71 05       	cpc	r23, r1
     b50:	0c f0       	brlt	.+2      	; 0xb54 <_fpadd_parts+0xba>
     b52:	61 c0       	rjmp	.+194    	; 0xc16 <_fpadd_parts+0x17c>
     b54:	12 16       	cp	r1, r18
     b56:	13 06       	cpc	r1, r19
     b58:	6c f5       	brge	.+90     	; 0xbb4 <_fpadd_parts+0x11a>
     b5a:	37 01       	movw	r6, r14
     b5c:	48 01       	movw	r8, r16
     b5e:	06 2e       	mov	r0, r22
     b60:	04 c0       	rjmp	.+8      	; 0xb6a <_fpadd_parts+0xd0>
     b62:	96 94       	lsr	r9
     b64:	87 94       	ror	r8
     b66:	77 94       	ror	r7
     b68:	67 94       	ror	r6
     b6a:	0a 94       	dec	r0
     b6c:	d2 f7       	brpl	.-12     	; 0xb62 <_fpadd_parts+0xc8>
     b6e:	21 e0       	ldi	r18, 0x01	; 1
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	50 e0       	ldi	r21, 0x00	; 0
     b76:	04 c0       	rjmp	.+8      	; 0xb80 <_fpadd_parts+0xe6>
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	44 1f       	adc	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	6a 95       	dec	r22
     b82:	d2 f7       	brpl	.-12     	; 0xb78 <_fpadd_parts+0xde>
     b84:	21 50       	subi	r18, 0x01	; 1
     b86:	30 40       	sbci	r19, 0x00	; 0
     b88:	40 40       	sbci	r20, 0x00	; 0
     b8a:	50 40       	sbci	r21, 0x00	; 0
     b8c:	2e 21       	and	r18, r14
     b8e:	3f 21       	and	r19, r15
     b90:	40 23       	and	r20, r16
     b92:	51 23       	and	r21, r17
     b94:	21 15       	cp	r18, r1
     b96:	31 05       	cpc	r19, r1
     b98:	41 05       	cpc	r20, r1
     b9a:	51 05       	cpc	r21, r1
     b9c:	21 f0       	breq	.+8      	; 0xba6 <_fpadd_parts+0x10c>
     b9e:	21 e0       	ldi	r18, 0x01	; 1
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	79 01       	movw	r14, r18
     ba8:	8a 01       	movw	r16, r20
     baa:	e6 28       	or	r14, r6
     bac:	f7 28       	or	r15, r7
     bae:	08 29       	or	r16, r8
     bb0:	19 29       	or	r17, r9
     bb2:	3c c0       	rjmp	.+120    	; 0xc2c <_fpadd_parts+0x192>
     bb4:	23 2b       	or	r18, r19
     bb6:	d1 f1       	breq	.+116    	; 0xc2c <_fpadd_parts+0x192>
     bb8:	26 0e       	add	r2, r22
     bba:	37 1e       	adc	r3, r23
     bbc:	35 01       	movw	r6, r10
     bbe:	46 01       	movw	r8, r12
     bc0:	06 2e       	mov	r0, r22
     bc2:	04 c0       	rjmp	.+8      	; 0xbcc <_fpadd_parts+0x132>
     bc4:	96 94       	lsr	r9
     bc6:	87 94       	ror	r8
     bc8:	77 94       	ror	r7
     bca:	67 94       	ror	r6
     bcc:	0a 94       	dec	r0
     bce:	d2 f7       	brpl	.-12     	; 0xbc4 <_fpadd_parts+0x12a>
     bd0:	21 e0       	ldi	r18, 0x01	; 1
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	04 c0       	rjmp	.+8      	; 0xbe2 <_fpadd_parts+0x148>
     bda:	22 0f       	add	r18, r18
     bdc:	33 1f       	adc	r19, r19
     bde:	44 1f       	adc	r20, r20
     be0:	55 1f       	adc	r21, r21
     be2:	6a 95       	dec	r22
     be4:	d2 f7       	brpl	.-12     	; 0xbda <_fpadd_parts+0x140>
     be6:	21 50       	subi	r18, 0x01	; 1
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	40 40       	sbci	r20, 0x00	; 0
     bec:	50 40       	sbci	r21, 0x00	; 0
     bee:	2a 21       	and	r18, r10
     bf0:	3b 21       	and	r19, r11
     bf2:	4c 21       	and	r20, r12
     bf4:	5d 21       	and	r21, r13
     bf6:	21 15       	cp	r18, r1
     bf8:	31 05       	cpc	r19, r1
     bfa:	41 05       	cpc	r20, r1
     bfc:	51 05       	cpc	r21, r1
     bfe:	21 f0       	breq	.+8      	; 0xc08 <_fpadd_parts+0x16e>
     c00:	21 e0       	ldi	r18, 0x01	; 1
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	50 e0       	ldi	r21, 0x00	; 0
     c08:	59 01       	movw	r10, r18
     c0a:	6a 01       	movw	r12, r20
     c0c:	a6 28       	or	r10, r6
     c0e:	b7 28       	or	r11, r7
     c10:	c8 28       	or	r12, r8
     c12:	d9 28       	or	r13, r9
     c14:	0b c0       	rjmp	.+22     	; 0xc2c <_fpadd_parts+0x192>
     c16:	82 15       	cp	r24, r2
     c18:	93 05       	cpc	r25, r3
     c1a:	2c f0       	brlt	.+10     	; 0xc26 <_fpadd_parts+0x18c>
     c1c:	1c 01       	movw	r2, r24
     c1e:	aa 24       	eor	r10, r10
     c20:	bb 24       	eor	r11, r11
     c22:	65 01       	movw	r12, r10
     c24:	03 c0       	rjmp	.+6      	; 0xc2c <_fpadd_parts+0x192>
     c26:	ee 24       	eor	r14, r14
     c28:	ff 24       	eor	r15, r15
     c2a:	87 01       	movw	r16, r14
     c2c:	11 96       	adiw	r26, 0x01	; 1
     c2e:	9c 91       	ld	r25, X
     c30:	d2 01       	movw	r26, r4
     c32:	11 96       	adiw	r26, 0x01	; 1
     c34:	8c 91       	ld	r24, X
     c36:	98 17       	cp	r25, r24
     c38:	09 f4       	brne	.+2      	; 0xc3c <_fpadd_parts+0x1a2>
     c3a:	45 c0       	rjmp	.+138    	; 0xcc6 <_fpadd_parts+0x22c>
     c3c:	99 23       	and	r25, r25
     c3e:	39 f0       	breq	.+14     	; 0xc4e <_fpadd_parts+0x1b4>
     c40:	a8 01       	movw	r20, r16
     c42:	97 01       	movw	r18, r14
     c44:	2a 19       	sub	r18, r10
     c46:	3b 09       	sbc	r19, r11
     c48:	4c 09       	sbc	r20, r12
     c4a:	5d 09       	sbc	r21, r13
     c4c:	06 c0       	rjmp	.+12     	; 0xc5a <_fpadd_parts+0x1c0>
     c4e:	a6 01       	movw	r20, r12
     c50:	95 01       	movw	r18, r10
     c52:	2e 19       	sub	r18, r14
     c54:	3f 09       	sbc	r19, r15
     c56:	40 0b       	sbc	r20, r16
     c58:	51 0b       	sbc	r21, r17
     c5a:	57 fd       	sbrc	r21, 7
     c5c:	08 c0       	rjmp	.+16     	; 0xc6e <_fpadd_parts+0x1d4>
     c5e:	11 82       	std	Z+1, r1	; 0x01
     c60:	33 82       	std	Z+3, r3	; 0x03
     c62:	22 82       	std	Z+2, r2	; 0x02
     c64:	24 83       	std	Z+4, r18	; 0x04
     c66:	35 83       	std	Z+5, r19	; 0x05
     c68:	46 83       	std	Z+6, r20	; 0x06
     c6a:	57 83       	std	Z+7, r21	; 0x07
     c6c:	1d c0       	rjmp	.+58     	; 0xca8 <_fpadd_parts+0x20e>
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	81 83       	std	Z+1, r24	; 0x01
     c72:	33 82       	std	Z+3, r3	; 0x03
     c74:	22 82       	std	Z+2, r2	; 0x02
     c76:	88 27       	eor	r24, r24
     c78:	99 27       	eor	r25, r25
     c7a:	dc 01       	movw	r26, r24
     c7c:	82 1b       	sub	r24, r18
     c7e:	93 0b       	sbc	r25, r19
     c80:	a4 0b       	sbc	r26, r20
     c82:	b5 0b       	sbc	r27, r21
     c84:	84 83       	std	Z+4, r24	; 0x04
     c86:	95 83       	std	Z+5, r25	; 0x05
     c88:	a6 83       	std	Z+6, r26	; 0x06
     c8a:	b7 83       	std	Z+7, r27	; 0x07
     c8c:	0d c0       	rjmp	.+26     	; 0xca8 <_fpadd_parts+0x20e>
     c8e:	22 0f       	add	r18, r18
     c90:	33 1f       	adc	r19, r19
     c92:	44 1f       	adc	r20, r20
     c94:	55 1f       	adc	r21, r21
     c96:	24 83       	std	Z+4, r18	; 0x04
     c98:	35 83       	std	Z+5, r19	; 0x05
     c9a:	46 83       	std	Z+6, r20	; 0x06
     c9c:	57 83       	std	Z+7, r21	; 0x07
     c9e:	82 81       	ldd	r24, Z+2	; 0x02
     ca0:	93 81       	ldd	r25, Z+3	; 0x03
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	93 83       	std	Z+3, r25	; 0x03
     ca6:	82 83       	std	Z+2, r24	; 0x02
     ca8:	24 81       	ldd	r18, Z+4	; 0x04
     caa:	35 81       	ldd	r19, Z+5	; 0x05
     cac:	46 81       	ldd	r20, Z+6	; 0x06
     cae:	57 81       	ldd	r21, Z+7	; 0x07
     cb0:	da 01       	movw	r26, r20
     cb2:	c9 01       	movw	r24, r18
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	a1 09       	sbc	r26, r1
     cb8:	b1 09       	sbc	r27, r1
     cba:	8f 5f       	subi	r24, 0xFF	; 255
     cbc:	9f 4f       	sbci	r25, 0xFF	; 255
     cbe:	af 4f       	sbci	r26, 0xFF	; 255
     cc0:	bf 43       	sbci	r27, 0x3F	; 63
     cc2:	28 f3       	brcs	.-54     	; 0xc8e <_fpadd_parts+0x1f4>
     cc4:	0b c0       	rjmp	.+22     	; 0xcdc <_fpadd_parts+0x242>
     cc6:	91 83       	std	Z+1, r25	; 0x01
     cc8:	33 82       	std	Z+3, r3	; 0x03
     cca:	22 82       	std	Z+2, r2	; 0x02
     ccc:	ea 0c       	add	r14, r10
     cce:	fb 1c       	adc	r15, r11
     cd0:	0c 1d       	adc	r16, r12
     cd2:	1d 1d       	adc	r17, r13
     cd4:	e4 82       	std	Z+4, r14	; 0x04
     cd6:	f5 82       	std	Z+5, r15	; 0x05
     cd8:	06 83       	std	Z+6, r16	; 0x06
     cda:	17 83       	std	Z+7, r17	; 0x07
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	80 83       	st	Z, r24
     ce0:	24 81       	ldd	r18, Z+4	; 0x04
     ce2:	35 81       	ldd	r19, Z+5	; 0x05
     ce4:	46 81       	ldd	r20, Z+6	; 0x06
     ce6:	57 81       	ldd	r21, Z+7	; 0x07
     ce8:	57 ff       	sbrs	r21, 7
     cea:	1a c0       	rjmp	.+52     	; 0xd20 <_fpadd_parts+0x286>
     cec:	c9 01       	movw	r24, r18
     cee:	aa 27       	eor	r26, r26
     cf0:	97 fd       	sbrc	r25, 7
     cf2:	a0 95       	com	r26
     cf4:	ba 2f       	mov	r27, r26
     cf6:	81 70       	andi	r24, 0x01	; 1
     cf8:	90 70       	andi	r25, 0x00	; 0
     cfa:	a0 70       	andi	r26, 0x00	; 0
     cfc:	b0 70       	andi	r27, 0x00	; 0
     cfe:	56 95       	lsr	r21
     d00:	47 95       	ror	r20
     d02:	37 95       	ror	r19
     d04:	27 95       	ror	r18
     d06:	82 2b       	or	r24, r18
     d08:	93 2b       	or	r25, r19
     d0a:	a4 2b       	or	r26, r20
     d0c:	b5 2b       	or	r27, r21
     d0e:	84 83       	std	Z+4, r24	; 0x04
     d10:	95 83       	std	Z+5, r25	; 0x05
     d12:	a6 83       	std	Z+6, r26	; 0x06
     d14:	b7 83       	std	Z+7, r27	; 0x07
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	93 83       	std	Z+3, r25	; 0x03
     d1e:	82 83       	std	Z+2, r24	; 0x02
     d20:	df 01       	movw	r26, r30
     d22:	01 c0       	rjmp	.+2      	; 0xd26 <_fpadd_parts+0x28c>
     d24:	d2 01       	movw	r26, r4
     d26:	cd 01       	movw	r24, r26
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	e2 e1       	ldi	r30, 0x12	; 18
     d2e:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <__epilogue_restores__>

00000d32 <__subsf3>:
     d32:	a0 e2       	ldi	r26, 0x20	; 32
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	ef e9       	ldi	r30, 0x9F	; 159
     d38:	f6 e0       	ldi	r31, 0x06	; 6
     d3a:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__prologue_saves__+0x18>
     d3e:	69 83       	std	Y+1, r22	; 0x01
     d40:	7a 83       	std	Y+2, r23	; 0x02
     d42:	8b 83       	std	Y+3, r24	; 0x03
     d44:	9c 83       	std	Y+4, r25	; 0x04
     d46:	2d 83       	std	Y+5, r18	; 0x05
     d48:	3e 83       	std	Y+6, r19	; 0x06
     d4a:	4f 83       	std	Y+7, r20	; 0x07
     d4c:	58 87       	std	Y+8, r21	; 0x08
     d4e:	e9 e0       	ldi	r30, 0x09	; 9
     d50:	ee 2e       	mov	r14, r30
     d52:	f1 2c       	mov	r15, r1
     d54:	ec 0e       	add	r14, r28
     d56:	fd 1e       	adc	r15, r29
     d58:	ce 01       	movw	r24, r28
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	b7 01       	movw	r22, r14
     d5e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__unpack_f>
     d62:	8e 01       	movw	r16, r28
     d64:	0f 5e       	subi	r16, 0xEF	; 239
     d66:	1f 4f       	sbci	r17, 0xFF	; 255
     d68:	ce 01       	movw	r24, r28
     d6a:	05 96       	adiw	r24, 0x05	; 5
     d6c:	b8 01       	movw	r22, r16
     d6e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__unpack_f>
     d72:	8a 89       	ldd	r24, Y+18	; 0x12
     d74:	91 e0       	ldi	r25, 0x01	; 1
     d76:	89 27       	eor	r24, r25
     d78:	8a 8b       	std	Y+18, r24	; 0x12
     d7a:	c7 01       	movw	r24, r14
     d7c:	b8 01       	movw	r22, r16
     d7e:	ae 01       	movw	r20, r28
     d80:	47 5e       	subi	r20, 0xE7	; 231
     d82:	5f 4f       	sbci	r21, 0xFF	; 255
     d84:	0e 94 4d 05 	call	0xa9a	; 0xa9a <_fpadd_parts>
     d88:	0e 94 cb 09 	call	0x1396	; 0x1396 <__pack_f>
     d8c:	a0 96       	adiw	r28, 0x20	; 32
     d8e:	e6 e0       	ldi	r30, 0x06	; 6
     d90:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__epilogue_restores__+0x18>

00000d94 <__addsf3>:
     d94:	a0 e2       	ldi	r26, 0x20	; 32
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e0 ed       	ldi	r30, 0xD0	; 208
     d9a:	f6 e0       	ldi	r31, 0x06	; 6
     d9c:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__prologue_saves__+0x18>
     da0:	69 83       	std	Y+1, r22	; 0x01
     da2:	7a 83       	std	Y+2, r23	; 0x02
     da4:	8b 83       	std	Y+3, r24	; 0x03
     da6:	9c 83       	std	Y+4, r25	; 0x04
     da8:	2d 83       	std	Y+5, r18	; 0x05
     daa:	3e 83       	std	Y+6, r19	; 0x06
     dac:	4f 83       	std	Y+7, r20	; 0x07
     dae:	58 87       	std	Y+8, r21	; 0x08
     db0:	f9 e0       	ldi	r31, 0x09	; 9
     db2:	ef 2e       	mov	r14, r31
     db4:	f1 2c       	mov	r15, r1
     db6:	ec 0e       	add	r14, r28
     db8:	fd 1e       	adc	r15, r29
     dba:	ce 01       	movw	r24, r28
     dbc:	01 96       	adiw	r24, 0x01	; 1
     dbe:	b7 01       	movw	r22, r14
     dc0:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__unpack_f>
     dc4:	8e 01       	movw	r16, r28
     dc6:	0f 5e       	subi	r16, 0xEF	; 239
     dc8:	1f 4f       	sbci	r17, 0xFF	; 255
     dca:	ce 01       	movw	r24, r28
     dcc:	05 96       	adiw	r24, 0x05	; 5
     dce:	b8 01       	movw	r22, r16
     dd0:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__unpack_f>
     dd4:	c7 01       	movw	r24, r14
     dd6:	b8 01       	movw	r22, r16
     dd8:	ae 01       	movw	r20, r28
     dda:	47 5e       	subi	r20, 0xE7	; 231
     ddc:	5f 4f       	sbci	r21, 0xFF	; 255
     dde:	0e 94 4d 05 	call	0xa9a	; 0xa9a <_fpadd_parts>
     de2:	0e 94 cb 09 	call	0x1396	; 0x1396 <__pack_f>
     de6:	a0 96       	adiw	r28, 0x20	; 32
     de8:	e6 e0       	ldi	r30, 0x06	; 6
     dea:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__epilogue_restores__+0x18>

00000dee <__mulsf3>:
     dee:	a0 e2       	ldi	r26, 0x20	; 32
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	ed ef       	ldi	r30, 0xFD	; 253
     df4:	f6 e0       	ldi	r31, 0x06	; 6
     df6:	0c 94 85 0b 	jmp	0x170a	; 0x170a <__prologue_saves__>
     dfa:	69 83       	std	Y+1, r22	; 0x01
     dfc:	7a 83       	std	Y+2, r23	; 0x02
     dfe:	8b 83       	std	Y+3, r24	; 0x03
     e00:	9c 83       	std	Y+4, r25	; 0x04
     e02:	2d 83       	std	Y+5, r18	; 0x05
     e04:	3e 83       	std	Y+6, r19	; 0x06
     e06:	4f 83       	std	Y+7, r20	; 0x07
     e08:	58 87       	std	Y+8, r21	; 0x08
     e0a:	ce 01       	movw	r24, r28
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	be 01       	movw	r22, r28
     e10:	67 5f       	subi	r22, 0xF7	; 247
     e12:	7f 4f       	sbci	r23, 0xFF	; 255
     e14:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__unpack_f>
     e18:	ce 01       	movw	r24, r28
     e1a:	05 96       	adiw	r24, 0x05	; 5
     e1c:	be 01       	movw	r22, r28
     e1e:	6f 5e       	subi	r22, 0xEF	; 239
     e20:	7f 4f       	sbci	r23, 0xFF	; 255
     e22:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__unpack_f>
     e26:	99 85       	ldd	r25, Y+9	; 0x09
     e28:	92 30       	cpi	r25, 0x02	; 2
     e2a:	88 f0       	brcs	.+34     	; 0xe4e <__mulsf3+0x60>
     e2c:	89 89       	ldd	r24, Y+17	; 0x11
     e2e:	82 30       	cpi	r24, 0x02	; 2
     e30:	c8 f0       	brcs	.+50     	; 0xe64 <__mulsf3+0x76>
     e32:	94 30       	cpi	r25, 0x04	; 4
     e34:	19 f4       	brne	.+6      	; 0xe3c <__mulsf3+0x4e>
     e36:	82 30       	cpi	r24, 0x02	; 2
     e38:	51 f4       	brne	.+20     	; 0xe4e <__mulsf3+0x60>
     e3a:	04 c0       	rjmp	.+8      	; 0xe44 <__mulsf3+0x56>
     e3c:	84 30       	cpi	r24, 0x04	; 4
     e3e:	29 f4       	brne	.+10     	; 0xe4a <__mulsf3+0x5c>
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	81 f4       	brne	.+32     	; 0xe64 <__mulsf3+0x76>
     e44:	89 e6       	ldi	r24, 0x69	; 105
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	c6 c0       	rjmp	.+396    	; 0xfd6 <__mulsf3+0x1e8>
     e4a:	92 30       	cpi	r25, 0x02	; 2
     e4c:	49 f4       	brne	.+18     	; 0xe60 <__mulsf3+0x72>
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	9a 85       	ldd	r25, Y+10	; 0x0a
     e52:	8a 89       	ldd	r24, Y+18	; 0x12
     e54:	98 13       	cpse	r25, r24
     e56:	21 e0       	ldi	r18, 0x01	; 1
     e58:	2a 87       	std	Y+10, r18	; 0x0a
     e5a:	ce 01       	movw	r24, r28
     e5c:	09 96       	adiw	r24, 0x09	; 9
     e5e:	bb c0       	rjmp	.+374    	; 0xfd6 <__mulsf3+0x1e8>
     e60:	82 30       	cpi	r24, 0x02	; 2
     e62:	49 f4       	brne	.+18     	; 0xe76 <__mulsf3+0x88>
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	9a 85       	ldd	r25, Y+10	; 0x0a
     e68:	8a 89       	ldd	r24, Y+18	; 0x12
     e6a:	98 13       	cpse	r25, r24
     e6c:	21 e0       	ldi	r18, 0x01	; 1
     e6e:	2a 8b       	std	Y+18, r18	; 0x12
     e70:	ce 01       	movw	r24, r28
     e72:	41 96       	adiw	r24, 0x11	; 17
     e74:	b0 c0       	rjmp	.+352    	; 0xfd6 <__mulsf3+0x1e8>
     e76:	2d 84       	ldd	r2, Y+13	; 0x0d
     e78:	3e 84       	ldd	r3, Y+14	; 0x0e
     e7a:	4f 84       	ldd	r4, Y+15	; 0x0f
     e7c:	58 88       	ldd	r5, Y+16	; 0x10
     e7e:	6d 88       	ldd	r6, Y+21	; 0x15
     e80:	7e 88       	ldd	r7, Y+22	; 0x16
     e82:	8f 88       	ldd	r8, Y+23	; 0x17
     e84:	98 8c       	ldd	r9, Y+24	; 0x18
     e86:	ee 24       	eor	r14, r14
     e88:	ff 24       	eor	r15, r15
     e8a:	87 01       	movw	r16, r14
     e8c:	aa 24       	eor	r10, r10
     e8e:	bb 24       	eor	r11, r11
     e90:	65 01       	movw	r12, r10
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	e0 e0       	ldi	r30, 0x00	; 0
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	c1 01       	movw	r24, r2
     ea0:	81 70       	andi	r24, 0x01	; 1
     ea2:	90 70       	andi	r25, 0x00	; 0
     ea4:	89 2b       	or	r24, r25
     ea6:	e9 f0       	breq	.+58     	; 0xee2 <__mulsf3+0xf4>
     ea8:	e6 0c       	add	r14, r6
     eaa:	f7 1c       	adc	r15, r7
     eac:	08 1d       	adc	r16, r8
     eae:	19 1d       	adc	r17, r9
     eb0:	9a 01       	movw	r18, r20
     eb2:	ab 01       	movw	r20, r22
     eb4:	2a 0d       	add	r18, r10
     eb6:	3b 1d       	adc	r19, r11
     eb8:	4c 1d       	adc	r20, r12
     eba:	5d 1d       	adc	r21, r13
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	a0 e0       	ldi	r26, 0x00	; 0
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e6 14       	cp	r14, r6
     ec6:	f7 04       	cpc	r15, r7
     ec8:	08 05       	cpc	r16, r8
     eca:	19 05       	cpc	r17, r9
     ecc:	20 f4       	brcc	.+8      	; 0xed6 <__mulsf3+0xe8>
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	a0 e0       	ldi	r26, 0x00	; 0
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ba 01       	movw	r22, r20
     ed8:	a9 01       	movw	r20, r18
     eda:	48 0f       	add	r20, r24
     edc:	59 1f       	adc	r21, r25
     ede:	6a 1f       	adc	r22, r26
     ee0:	7b 1f       	adc	r23, r27
     ee2:	aa 0c       	add	r10, r10
     ee4:	bb 1c       	adc	r11, r11
     ee6:	cc 1c       	adc	r12, r12
     ee8:	dd 1c       	adc	r13, r13
     eea:	97 fe       	sbrs	r9, 7
     eec:	08 c0       	rjmp	.+16     	; 0xefe <__mulsf3+0x110>
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	a0 e0       	ldi	r26, 0x00	; 0
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	a8 2a       	or	r10, r24
     ef8:	b9 2a       	or	r11, r25
     efa:	ca 2a       	or	r12, r26
     efc:	db 2a       	or	r13, r27
     efe:	31 96       	adiw	r30, 0x01	; 1
     f00:	e0 32       	cpi	r30, 0x20	; 32
     f02:	f1 05       	cpc	r31, r1
     f04:	49 f0       	breq	.+18     	; 0xf18 <__mulsf3+0x12a>
     f06:	66 0c       	add	r6, r6
     f08:	77 1c       	adc	r7, r7
     f0a:	88 1c       	adc	r8, r8
     f0c:	99 1c       	adc	r9, r9
     f0e:	56 94       	lsr	r5
     f10:	47 94       	ror	r4
     f12:	37 94       	ror	r3
     f14:	27 94       	ror	r2
     f16:	c3 cf       	rjmp	.-122    	; 0xe9e <__mulsf3+0xb0>
     f18:	fa 85       	ldd	r31, Y+10	; 0x0a
     f1a:	ea 89       	ldd	r30, Y+18	; 0x12
     f1c:	2b 89       	ldd	r18, Y+19	; 0x13
     f1e:	3c 89       	ldd	r19, Y+20	; 0x14
     f20:	8b 85       	ldd	r24, Y+11	; 0x0b
     f22:	9c 85       	ldd	r25, Y+12	; 0x0c
     f24:	28 0f       	add	r18, r24
     f26:	39 1f       	adc	r19, r25
     f28:	2e 5f       	subi	r18, 0xFE	; 254
     f2a:	3f 4f       	sbci	r19, 0xFF	; 255
     f2c:	17 c0       	rjmp	.+46     	; 0xf5c <__mulsf3+0x16e>
     f2e:	ca 01       	movw	r24, r20
     f30:	81 70       	andi	r24, 0x01	; 1
     f32:	90 70       	andi	r25, 0x00	; 0
     f34:	89 2b       	or	r24, r25
     f36:	61 f0       	breq	.+24     	; 0xf50 <__mulsf3+0x162>
     f38:	16 95       	lsr	r17
     f3a:	07 95       	ror	r16
     f3c:	f7 94       	ror	r15
     f3e:	e7 94       	ror	r14
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	a0 e0       	ldi	r26, 0x00	; 0
     f46:	b0 e8       	ldi	r27, 0x80	; 128
     f48:	e8 2a       	or	r14, r24
     f4a:	f9 2a       	or	r15, r25
     f4c:	0a 2b       	or	r16, r26
     f4e:	1b 2b       	or	r17, r27
     f50:	76 95       	lsr	r23
     f52:	67 95       	ror	r22
     f54:	57 95       	ror	r21
     f56:	47 95       	ror	r20
     f58:	2f 5f       	subi	r18, 0xFF	; 255
     f5a:	3f 4f       	sbci	r19, 0xFF	; 255
     f5c:	77 fd       	sbrc	r23, 7
     f5e:	e7 cf       	rjmp	.-50     	; 0xf2e <__mulsf3+0x140>
     f60:	0c c0       	rjmp	.+24     	; 0xf7a <__mulsf3+0x18c>
     f62:	44 0f       	add	r20, r20
     f64:	55 1f       	adc	r21, r21
     f66:	66 1f       	adc	r22, r22
     f68:	77 1f       	adc	r23, r23
     f6a:	17 fd       	sbrc	r17, 7
     f6c:	41 60       	ori	r20, 0x01	; 1
     f6e:	ee 0c       	add	r14, r14
     f70:	ff 1c       	adc	r15, r15
     f72:	00 1f       	adc	r16, r16
     f74:	11 1f       	adc	r17, r17
     f76:	21 50       	subi	r18, 0x01	; 1
     f78:	30 40       	sbci	r19, 0x00	; 0
     f7a:	40 30       	cpi	r20, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	59 07       	cpc	r21, r25
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	69 07       	cpc	r22, r25
     f84:	90 e4       	ldi	r25, 0x40	; 64
     f86:	79 07       	cpc	r23, r25
     f88:	60 f3       	brcs	.-40     	; 0xf62 <__mulsf3+0x174>
     f8a:	2b 8f       	std	Y+27, r18	; 0x1b
     f8c:	3c 8f       	std	Y+28, r19	; 0x1c
     f8e:	db 01       	movw	r26, r22
     f90:	ca 01       	movw	r24, r20
     f92:	8f 77       	andi	r24, 0x7F	; 127
     f94:	90 70       	andi	r25, 0x00	; 0
     f96:	a0 70       	andi	r26, 0x00	; 0
     f98:	b0 70       	andi	r27, 0x00	; 0
     f9a:	80 34       	cpi	r24, 0x40	; 64
     f9c:	91 05       	cpc	r25, r1
     f9e:	a1 05       	cpc	r26, r1
     fa0:	b1 05       	cpc	r27, r1
     fa2:	61 f4       	brne	.+24     	; 0xfbc <__mulsf3+0x1ce>
     fa4:	47 fd       	sbrc	r20, 7
     fa6:	0a c0       	rjmp	.+20     	; 0xfbc <__mulsf3+0x1ce>
     fa8:	e1 14       	cp	r14, r1
     faa:	f1 04       	cpc	r15, r1
     fac:	01 05       	cpc	r16, r1
     fae:	11 05       	cpc	r17, r1
     fb0:	29 f0       	breq	.+10     	; 0xfbc <__mulsf3+0x1ce>
     fb2:	40 5c       	subi	r20, 0xC0	; 192
     fb4:	5f 4f       	sbci	r21, 0xFF	; 255
     fb6:	6f 4f       	sbci	r22, 0xFF	; 255
     fb8:	7f 4f       	sbci	r23, 0xFF	; 255
     fba:	40 78       	andi	r20, 0x80	; 128
     fbc:	1a 8e       	std	Y+26, r1	; 0x1a
     fbe:	fe 17       	cp	r31, r30
     fc0:	11 f0       	breq	.+4      	; 0xfc6 <__mulsf3+0x1d8>
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	8a 8f       	std	Y+26, r24	; 0x1a
     fc6:	4d 8f       	std	Y+29, r20	; 0x1d
     fc8:	5e 8f       	std	Y+30, r21	; 0x1e
     fca:	6f 8f       	std	Y+31, r22	; 0x1f
     fcc:	78 a3       	std	Y+32, r23	; 0x20
     fce:	83 e0       	ldi	r24, 0x03	; 3
     fd0:	89 8f       	std	Y+25, r24	; 0x19
     fd2:	ce 01       	movw	r24, r28
     fd4:	49 96       	adiw	r24, 0x19	; 25
     fd6:	0e 94 cb 09 	call	0x1396	; 0x1396 <__pack_f>
     fda:	a0 96       	adiw	r28, 0x20	; 32
     fdc:	e2 e1       	ldi	r30, 0x12	; 18
     fde:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <__epilogue_restores__>

00000fe2 <__gesf2>:
     fe2:	a8 e1       	ldi	r26, 0x18	; 24
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e7 ef       	ldi	r30, 0xF7	; 247
     fe8:	f7 e0       	ldi	r31, 0x07	; 7
     fea:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__prologue_saves__+0x18>
     fee:	69 83       	std	Y+1, r22	; 0x01
     ff0:	7a 83       	std	Y+2, r23	; 0x02
     ff2:	8b 83       	std	Y+3, r24	; 0x03
     ff4:	9c 83       	std	Y+4, r25	; 0x04
     ff6:	2d 83       	std	Y+5, r18	; 0x05
     ff8:	3e 83       	std	Y+6, r19	; 0x06
     ffa:	4f 83       	std	Y+7, r20	; 0x07
     ffc:	58 87       	std	Y+8, r21	; 0x08
     ffe:	89 e0       	ldi	r24, 0x09	; 9
    1000:	e8 2e       	mov	r14, r24
    1002:	f1 2c       	mov	r15, r1
    1004:	ec 0e       	add	r14, r28
    1006:	fd 1e       	adc	r15, r29
    1008:	ce 01       	movw	r24, r28
    100a:	01 96       	adiw	r24, 0x01	; 1
    100c:	b7 01       	movw	r22, r14
    100e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__unpack_f>
    1012:	8e 01       	movw	r16, r28
    1014:	0f 5e       	subi	r16, 0xEF	; 239
    1016:	1f 4f       	sbci	r17, 0xFF	; 255
    1018:	ce 01       	movw	r24, r28
    101a:	05 96       	adiw	r24, 0x05	; 5
    101c:	b8 01       	movw	r22, r16
    101e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__unpack_f>
    1022:	89 85       	ldd	r24, Y+9	; 0x09
    1024:	82 30       	cpi	r24, 0x02	; 2
    1026:	40 f0       	brcs	.+16     	; 0x1038 <__gesf2+0x56>
    1028:	89 89       	ldd	r24, Y+17	; 0x11
    102a:	82 30       	cpi	r24, 0x02	; 2
    102c:	28 f0       	brcs	.+10     	; 0x1038 <__gesf2+0x56>
    102e:	c7 01       	movw	r24, r14
    1030:	b8 01       	movw	r22, r16
    1032:	0e 94 18 0b 	call	0x1630	; 0x1630 <__fpcmp_parts_f>
    1036:	01 c0       	rjmp	.+2      	; 0x103a <__gesf2+0x58>
    1038:	8f ef       	ldi	r24, 0xFF	; 255
    103a:	68 96       	adiw	r28, 0x18	; 24
    103c:	e6 e0       	ldi	r30, 0x06	; 6
    103e:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__epilogue_restores__+0x18>

00001042 <__ltsf2>:
    1042:	a8 e1       	ldi	r26, 0x18	; 24
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e7 e2       	ldi	r30, 0x27	; 39
    1048:	f8 e0       	ldi	r31, 0x08	; 8
    104a:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__prologue_saves__+0x18>
    104e:	69 83       	std	Y+1, r22	; 0x01
    1050:	7a 83       	std	Y+2, r23	; 0x02
    1052:	8b 83       	std	Y+3, r24	; 0x03
    1054:	9c 83       	std	Y+4, r25	; 0x04
    1056:	2d 83       	std	Y+5, r18	; 0x05
    1058:	3e 83       	std	Y+6, r19	; 0x06
    105a:	4f 83       	std	Y+7, r20	; 0x07
    105c:	58 87       	std	Y+8, r21	; 0x08
    105e:	89 e0       	ldi	r24, 0x09	; 9
    1060:	e8 2e       	mov	r14, r24
    1062:	f1 2c       	mov	r15, r1
    1064:	ec 0e       	add	r14, r28
    1066:	fd 1e       	adc	r15, r29
    1068:	ce 01       	movw	r24, r28
    106a:	01 96       	adiw	r24, 0x01	; 1
    106c:	b7 01       	movw	r22, r14
    106e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__unpack_f>
    1072:	8e 01       	movw	r16, r28
    1074:	0f 5e       	subi	r16, 0xEF	; 239
    1076:	1f 4f       	sbci	r17, 0xFF	; 255
    1078:	ce 01       	movw	r24, r28
    107a:	05 96       	adiw	r24, 0x05	; 5
    107c:	b8 01       	movw	r22, r16
    107e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__unpack_f>
    1082:	89 85       	ldd	r24, Y+9	; 0x09
    1084:	82 30       	cpi	r24, 0x02	; 2
    1086:	40 f0       	brcs	.+16     	; 0x1098 <__ltsf2+0x56>
    1088:	89 89       	ldd	r24, Y+17	; 0x11
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	28 f0       	brcs	.+10     	; 0x1098 <__ltsf2+0x56>
    108e:	c7 01       	movw	r24, r14
    1090:	b8 01       	movw	r22, r16
    1092:	0e 94 18 0b 	call	0x1630	; 0x1630 <__fpcmp_parts_f>
    1096:	01 c0       	rjmp	.+2      	; 0x109a <__ltsf2+0x58>
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	68 96       	adiw	r28, 0x18	; 24
    109c:	e6 e0       	ldi	r30, 0x06	; 6
    109e:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__epilogue_restores__+0x18>

000010a2 <__floatsisf>:
    10a2:	a8 e0       	ldi	r26, 0x08	; 8
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e7 e5       	ldi	r30, 0x57	; 87
    10a8:	f8 e0       	ldi	r31, 0x08	; 8
    10aa:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__prologue_saves__+0x12>
    10ae:	9b 01       	movw	r18, r22
    10b0:	ac 01       	movw	r20, r24
    10b2:	83 e0       	ldi	r24, 0x03	; 3
    10b4:	89 83       	std	Y+1, r24	; 0x01
    10b6:	da 01       	movw	r26, r20
    10b8:	c9 01       	movw	r24, r18
    10ba:	88 27       	eor	r24, r24
    10bc:	b7 fd       	sbrc	r27, 7
    10be:	83 95       	inc	r24
    10c0:	99 27       	eor	r25, r25
    10c2:	aa 27       	eor	r26, r26
    10c4:	bb 27       	eor	r27, r27
    10c6:	b8 2e       	mov	r11, r24
    10c8:	21 15       	cp	r18, r1
    10ca:	31 05       	cpc	r19, r1
    10cc:	41 05       	cpc	r20, r1
    10ce:	51 05       	cpc	r21, r1
    10d0:	19 f4       	brne	.+6      	; 0x10d8 <__floatsisf+0x36>
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	89 83       	std	Y+1, r24	; 0x01
    10d6:	3a c0       	rjmp	.+116    	; 0x114c <__floatsisf+0xaa>
    10d8:	88 23       	and	r24, r24
    10da:	a9 f0       	breq	.+42     	; 0x1106 <__floatsisf+0x64>
    10dc:	20 30       	cpi	r18, 0x00	; 0
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	38 07       	cpc	r19, r24
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	48 07       	cpc	r20, r24
    10e6:	80 e8       	ldi	r24, 0x80	; 128
    10e8:	58 07       	cpc	r21, r24
    10ea:	29 f4       	brne	.+10     	; 0x10f6 <__floatsisf+0x54>
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	9f ec       	ldi	r25, 0xCF	; 207
    10f4:	30 c0       	rjmp	.+96     	; 0x1156 <__floatsisf+0xb4>
    10f6:	ee 24       	eor	r14, r14
    10f8:	ff 24       	eor	r15, r15
    10fa:	87 01       	movw	r16, r14
    10fc:	e2 1a       	sub	r14, r18
    10fe:	f3 0a       	sbc	r15, r19
    1100:	04 0b       	sbc	r16, r20
    1102:	15 0b       	sbc	r17, r21
    1104:	02 c0       	rjmp	.+4      	; 0x110a <__floatsisf+0x68>
    1106:	79 01       	movw	r14, r18
    1108:	8a 01       	movw	r16, r20
    110a:	8e e1       	ldi	r24, 0x1E	; 30
    110c:	c8 2e       	mov	r12, r24
    110e:	d1 2c       	mov	r13, r1
    1110:	dc 82       	std	Y+4, r13	; 0x04
    1112:	cb 82       	std	Y+3, r12	; 0x03
    1114:	ed 82       	std	Y+5, r14	; 0x05
    1116:	fe 82       	std	Y+6, r15	; 0x06
    1118:	0f 83       	std	Y+7, r16	; 0x07
    111a:	18 87       	std	Y+8, r17	; 0x08
    111c:	c8 01       	movw	r24, r16
    111e:	b7 01       	movw	r22, r14
    1120:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <__clzsi2>
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	18 16       	cp	r1, r24
    1128:	19 06       	cpc	r1, r25
    112a:	84 f4       	brge	.+32     	; 0x114c <__floatsisf+0xaa>
    112c:	08 2e       	mov	r0, r24
    112e:	04 c0       	rjmp	.+8      	; 0x1138 <__floatsisf+0x96>
    1130:	ee 0c       	add	r14, r14
    1132:	ff 1c       	adc	r15, r15
    1134:	00 1f       	adc	r16, r16
    1136:	11 1f       	adc	r17, r17
    1138:	0a 94       	dec	r0
    113a:	d2 f7       	brpl	.-12     	; 0x1130 <__floatsisf+0x8e>
    113c:	ed 82       	std	Y+5, r14	; 0x05
    113e:	fe 82       	std	Y+6, r15	; 0x06
    1140:	0f 83       	std	Y+7, r16	; 0x07
    1142:	18 87       	std	Y+8, r17	; 0x08
    1144:	c8 1a       	sub	r12, r24
    1146:	d9 0a       	sbc	r13, r25
    1148:	dc 82       	std	Y+4, r13	; 0x04
    114a:	cb 82       	std	Y+3, r12	; 0x03
    114c:	ba 82       	std	Y+2, r11	; 0x02
    114e:	ce 01       	movw	r24, r28
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	0e 94 cb 09 	call	0x1396	; 0x1396 <__pack_f>
    1156:	28 96       	adiw	r28, 0x08	; 8
    1158:	e9 e0       	ldi	r30, 0x09	; 9
    115a:	0c 94 aa 0b 	jmp	0x1754	; 0x1754 <__epilogue_restores__+0x12>

0000115e <__fixsfsi>:
    115e:	ac e0       	ldi	r26, 0x0C	; 12
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e5 eb       	ldi	r30, 0xB5	; 181
    1164:	f8 e0       	ldi	r31, 0x08	; 8
    1166:	0c 94 95 0b 	jmp	0x172a	; 0x172a <__prologue_saves__+0x20>
    116a:	69 83       	std	Y+1, r22	; 0x01
    116c:	7a 83       	std	Y+2, r23	; 0x02
    116e:	8b 83       	std	Y+3, r24	; 0x03
    1170:	9c 83       	std	Y+4, r25	; 0x04
    1172:	ce 01       	movw	r24, r28
    1174:	01 96       	adiw	r24, 0x01	; 1
    1176:	be 01       	movw	r22, r28
    1178:	6b 5f       	subi	r22, 0xFB	; 251
    117a:	7f 4f       	sbci	r23, 0xFF	; 255
    117c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__unpack_f>
    1180:	8d 81       	ldd	r24, Y+5	; 0x05
    1182:	82 30       	cpi	r24, 0x02	; 2
    1184:	61 f1       	breq	.+88     	; 0x11de <__fixsfsi+0x80>
    1186:	82 30       	cpi	r24, 0x02	; 2
    1188:	50 f1       	brcs	.+84     	; 0x11de <__fixsfsi+0x80>
    118a:	84 30       	cpi	r24, 0x04	; 4
    118c:	21 f4       	brne	.+8      	; 0x1196 <__fixsfsi+0x38>
    118e:	8e 81       	ldd	r24, Y+6	; 0x06
    1190:	88 23       	and	r24, r24
    1192:	51 f1       	breq	.+84     	; 0x11e8 <__fixsfsi+0x8a>
    1194:	2e c0       	rjmp	.+92     	; 0x11f2 <__fixsfsi+0x94>
    1196:	2f 81       	ldd	r18, Y+7	; 0x07
    1198:	38 85       	ldd	r19, Y+8	; 0x08
    119a:	37 fd       	sbrc	r19, 7
    119c:	20 c0       	rjmp	.+64     	; 0x11de <__fixsfsi+0x80>
    119e:	6e 81       	ldd	r22, Y+6	; 0x06
    11a0:	2f 31       	cpi	r18, 0x1F	; 31
    11a2:	31 05       	cpc	r19, r1
    11a4:	1c f0       	brlt	.+6      	; 0x11ac <__fixsfsi+0x4e>
    11a6:	66 23       	and	r22, r22
    11a8:	f9 f0       	breq	.+62     	; 0x11e8 <__fixsfsi+0x8a>
    11aa:	23 c0       	rjmp	.+70     	; 0x11f2 <__fixsfsi+0x94>
    11ac:	8e e1       	ldi	r24, 0x1E	; 30
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	82 1b       	sub	r24, r18
    11b2:	93 0b       	sbc	r25, r19
    11b4:	29 85       	ldd	r18, Y+9	; 0x09
    11b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    11b8:	4b 85       	ldd	r20, Y+11	; 0x0b
    11ba:	5c 85       	ldd	r21, Y+12	; 0x0c
    11bc:	04 c0       	rjmp	.+8      	; 0x11c6 <__fixsfsi+0x68>
    11be:	56 95       	lsr	r21
    11c0:	47 95       	ror	r20
    11c2:	37 95       	ror	r19
    11c4:	27 95       	ror	r18
    11c6:	8a 95       	dec	r24
    11c8:	d2 f7       	brpl	.-12     	; 0x11be <__fixsfsi+0x60>
    11ca:	66 23       	and	r22, r22
    11cc:	b1 f0       	breq	.+44     	; 0x11fa <__fixsfsi+0x9c>
    11ce:	50 95       	com	r21
    11d0:	40 95       	com	r20
    11d2:	30 95       	com	r19
    11d4:	21 95       	neg	r18
    11d6:	3f 4f       	sbci	r19, 0xFF	; 255
    11d8:	4f 4f       	sbci	r20, 0xFF	; 255
    11da:	5f 4f       	sbci	r21, 0xFF	; 255
    11dc:	0e c0       	rjmp	.+28     	; 0x11fa <__fixsfsi+0x9c>
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	40 e0       	ldi	r20, 0x00	; 0
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	09 c0       	rjmp	.+18     	; 0x11fa <__fixsfsi+0x9c>
    11e8:	2f ef       	ldi	r18, 0xFF	; 255
    11ea:	3f ef       	ldi	r19, 0xFF	; 255
    11ec:	4f ef       	ldi	r20, 0xFF	; 255
    11ee:	5f e7       	ldi	r21, 0x7F	; 127
    11f0:	04 c0       	rjmp	.+8      	; 0x11fa <__fixsfsi+0x9c>
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	40 e0       	ldi	r20, 0x00	; 0
    11f8:	50 e8       	ldi	r21, 0x80	; 128
    11fa:	b9 01       	movw	r22, r18
    11fc:	ca 01       	movw	r24, r20
    11fe:	2c 96       	adiw	r28, 0x0c	; 12
    1200:	e2 e0       	ldi	r30, 0x02	; 2
    1202:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__epilogue_restores__+0x20>

00001206 <__floatunsisf>:
    1206:	a8 e0       	ldi	r26, 0x08	; 8
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e9 e0       	ldi	r30, 0x09	; 9
    120c:	f9 e0       	ldi	r31, 0x09	; 9
    120e:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <__prologue_saves__+0x10>
    1212:	7b 01       	movw	r14, r22
    1214:	8c 01       	movw	r16, r24
    1216:	61 15       	cp	r22, r1
    1218:	71 05       	cpc	r23, r1
    121a:	81 05       	cpc	r24, r1
    121c:	91 05       	cpc	r25, r1
    121e:	19 f4       	brne	.+6      	; 0x1226 <__floatunsisf+0x20>
    1220:	82 e0       	ldi	r24, 0x02	; 2
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	60 c0       	rjmp	.+192    	; 0x12e6 <__floatunsisf+0xe0>
    1226:	83 e0       	ldi	r24, 0x03	; 3
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	8e e1       	ldi	r24, 0x1E	; 30
    122c:	c8 2e       	mov	r12, r24
    122e:	d1 2c       	mov	r13, r1
    1230:	dc 82       	std	Y+4, r13	; 0x04
    1232:	cb 82       	std	Y+3, r12	; 0x03
    1234:	ed 82       	std	Y+5, r14	; 0x05
    1236:	fe 82       	std	Y+6, r15	; 0x06
    1238:	0f 83       	std	Y+7, r16	; 0x07
    123a:	18 87       	std	Y+8, r17	; 0x08
    123c:	c8 01       	movw	r24, r16
    123e:	b7 01       	movw	r22, r14
    1240:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <__clzsi2>
    1244:	fc 01       	movw	r30, r24
    1246:	31 97       	sbiw	r30, 0x01	; 1
    1248:	f7 ff       	sbrs	r31, 7
    124a:	3b c0       	rjmp	.+118    	; 0x12c2 <__floatunsisf+0xbc>
    124c:	22 27       	eor	r18, r18
    124e:	33 27       	eor	r19, r19
    1250:	2e 1b       	sub	r18, r30
    1252:	3f 0b       	sbc	r19, r31
    1254:	57 01       	movw	r10, r14
    1256:	68 01       	movw	r12, r16
    1258:	02 2e       	mov	r0, r18
    125a:	04 c0       	rjmp	.+8      	; 0x1264 <__floatunsisf+0x5e>
    125c:	d6 94       	lsr	r13
    125e:	c7 94       	ror	r12
    1260:	b7 94       	ror	r11
    1262:	a7 94       	ror	r10
    1264:	0a 94       	dec	r0
    1266:	d2 f7       	brpl	.-12     	; 0x125c <__floatunsisf+0x56>
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	a0 e0       	ldi	r26, 0x00	; 0
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <__floatunsisf+0x7c>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	aa 1f       	adc	r26, r26
    1280:	bb 1f       	adc	r27, r27
    1282:	2a 95       	dec	r18
    1284:	d2 f7       	brpl	.-12     	; 0x127a <__floatunsisf+0x74>
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	a1 09       	sbc	r26, r1
    128a:	b1 09       	sbc	r27, r1
    128c:	8e 21       	and	r24, r14
    128e:	9f 21       	and	r25, r15
    1290:	a0 23       	and	r26, r16
    1292:	b1 23       	and	r27, r17
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	a1 05       	cpc	r26, r1
    1298:	b1 05       	cpc	r27, r1
    129a:	21 f0       	breq	.+8      	; 0x12a4 <__floatunsisf+0x9e>
    129c:	41 e0       	ldi	r20, 0x01	; 1
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	4a 29       	or	r20, r10
    12a6:	5b 29       	or	r21, r11
    12a8:	6c 29       	or	r22, r12
    12aa:	7d 29       	or	r23, r13
    12ac:	4d 83       	std	Y+5, r20	; 0x05
    12ae:	5e 83       	std	Y+6, r21	; 0x06
    12b0:	6f 83       	std	Y+7, r22	; 0x07
    12b2:	78 87       	std	Y+8, r23	; 0x08
    12b4:	8e e1       	ldi	r24, 0x1E	; 30
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	8e 1b       	sub	r24, r30
    12ba:	9f 0b       	sbc	r25, r31
    12bc:	9c 83       	std	Y+4, r25	; 0x04
    12be:	8b 83       	std	Y+3, r24	; 0x03
    12c0:	12 c0       	rjmp	.+36     	; 0x12e6 <__floatunsisf+0xe0>
    12c2:	30 97       	sbiw	r30, 0x00	; 0
    12c4:	81 f0       	breq	.+32     	; 0x12e6 <__floatunsisf+0xe0>
    12c6:	0e 2e       	mov	r0, r30
    12c8:	04 c0       	rjmp	.+8      	; 0x12d2 <__floatunsisf+0xcc>
    12ca:	ee 0c       	add	r14, r14
    12cc:	ff 1c       	adc	r15, r15
    12ce:	00 1f       	adc	r16, r16
    12d0:	11 1f       	adc	r17, r17
    12d2:	0a 94       	dec	r0
    12d4:	d2 f7       	brpl	.-12     	; 0x12ca <__floatunsisf+0xc4>
    12d6:	ed 82       	std	Y+5, r14	; 0x05
    12d8:	fe 82       	std	Y+6, r15	; 0x06
    12da:	0f 83       	std	Y+7, r16	; 0x07
    12dc:	18 87       	std	Y+8, r17	; 0x08
    12de:	ce 1a       	sub	r12, r30
    12e0:	df 0a       	sbc	r13, r31
    12e2:	dc 82       	std	Y+4, r13	; 0x04
    12e4:	cb 82       	std	Y+3, r12	; 0x03
    12e6:	1a 82       	std	Y+2, r1	; 0x02
    12e8:	ce 01       	movw	r24, r28
    12ea:	01 96       	adiw	r24, 0x01	; 1
    12ec:	0e 94 cb 09 	call	0x1396	; 0x1396 <__pack_f>
    12f0:	28 96       	adiw	r28, 0x08	; 8
    12f2:	ea e0       	ldi	r30, 0x0A	; 10
    12f4:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <__epilogue_restores__+0x10>

000012f8 <__clzsi2>:
    12f8:	ef 92       	push	r14
    12fa:	ff 92       	push	r15
    12fc:	0f 93       	push	r16
    12fe:	1f 93       	push	r17
    1300:	7b 01       	movw	r14, r22
    1302:	8c 01       	movw	r16, r24
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	e8 16       	cp	r14, r24
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	f8 06       	cpc	r15, r24
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	08 07       	cpc	r16, r24
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	18 07       	cpc	r17, r24
    1314:	88 f4       	brcc	.+34     	; 0x1338 <__clzsi2+0x40>
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	e8 16       	cp	r14, r24
    131a:	f1 04       	cpc	r15, r1
    131c:	01 05       	cpc	r16, r1
    131e:	11 05       	cpc	r17, r1
    1320:	31 f0       	breq	.+12     	; 0x132e <__clzsi2+0x36>
    1322:	28 f0       	brcs	.+10     	; 0x132e <__clzsi2+0x36>
    1324:	88 e0       	ldi	r24, 0x08	; 8
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	a0 e0       	ldi	r26, 0x00	; 0
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	17 c0       	rjmp	.+46     	; 0x135c <__clzsi2+0x64>
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	a0 e0       	ldi	r26, 0x00	; 0
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	12 c0       	rjmp	.+36     	; 0x135c <__clzsi2+0x64>
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	e8 16       	cp	r14, r24
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	f8 06       	cpc	r15, r24
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	08 07       	cpc	r16, r24
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	18 07       	cpc	r17, r24
    1348:	28 f0       	brcs	.+10     	; 0x1354 <__clzsi2+0x5c>
    134a:	88 e1       	ldi	r24, 0x18	; 24
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	a0 e0       	ldi	r26, 0x00	; 0
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	04 c0       	rjmp	.+8      	; 0x135c <__clzsi2+0x64>
    1354:	80 e1       	ldi	r24, 0x10	; 16
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	a0 e0       	ldi	r26, 0x00	; 0
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	20 e2       	ldi	r18, 0x20	; 32
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	40 e0       	ldi	r20, 0x00	; 0
    1362:	50 e0       	ldi	r21, 0x00	; 0
    1364:	28 1b       	sub	r18, r24
    1366:	39 0b       	sbc	r19, r25
    1368:	4a 0b       	sbc	r20, r26
    136a:	5b 0b       	sbc	r21, r27
    136c:	04 c0       	rjmp	.+8      	; 0x1376 <__clzsi2+0x7e>
    136e:	16 95       	lsr	r17
    1370:	07 95       	ror	r16
    1372:	f7 94       	ror	r15
    1374:	e7 94       	ror	r14
    1376:	8a 95       	dec	r24
    1378:	d2 f7       	brpl	.-12     	; 0x136e <__clzsi2+0x76>
    137a:	f7 01       	movw	r30, r14
    137c:	ef 58       	subi	r30, 0x8F	; 143
    137e:	fe 4f       	sbci	r31, 0xFE	; 254
    1380:	80 81       	ld	r24, Z
    1382:	28 1b       	sub	r18, r24
    1384:	31 09       	sbc	r19, r1
    1386:	41 09       	sbc	r20, r1
    1388:	51 09       	sbc	r21, r1
    138a:	c9 01       	movw	r24, r18
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	ff 90       	pop	r15
    1392:	ef 90       	pop	r14
    1394:	08 95       	ret

00001396 <__pack_f>:
    1396:	df 92       	push	r13
    1398:	ef 92       	push	r14
    139a:	ff 92       	push	r15
    139c:	0f 93       	push	r16
    139e:	1f 93       	push	r17
    13a0:	fc 01       	movw	r30, r24
    13a2:	e4 80       	ldd	r14, Z+4	; 0x04
    13a4:	f5 80       	ldd	r15, Z+5	; 0x05
    13a6:	06 81       	ldd	r16, Z+6	; 0x06
    13a8:	17 81       	ldd	r17, Z+7	; 0x07
    13aa:	d1 80       	ldd	r13, Z+1	; 0x01
    13ac:	80 81       	ld	r24, Z
    13ae:	82 30       	cpi	r24, 0x02	; 2
    13b0:	48 f4       	brcc	.+18     	; 0x13c4 <__pack_f+0x2e>
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	a0 e1       	ldi	r26, 0x10	; 16
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e8 2a       	or	r14, r24
    13bc:	f9 2a       	or	r15, r25
    13be:	0a 2b       	or	r16, r26
    13c0:	1b 2b       	or	r17, r27
    13c2:	a5 c0       	rjmp	.+330    	; 0x150e <__pack_f+0x178>
    13c4:	84 30       	cpi	r24, 0x04	; 4
    13c6:	09 f4       	brne	.+2      	; 0x13ca <__pack_f+0x34>
    13c8:	9f c0       	rjmp	.+318    	; 0x1508 <__pack_f+0x172>
    13ca:	82 30       	cpi	r24, 0x02	; 2
    13cc:	21 f4       	brne	.+8      	; 0x13d6 <__pack_f+0x40>
    13ce:	ee 24       	eor	r14, r14
    13d0:	ff 24       	eor	r15, r15
    13d2:	87 01       	movw	r16, r14
    13d4:	05 c0       	rjmp	.+10     	; 0x13e0 <__pack_f+0x4a>
    13d6:	e1 14       	cp	r14, r1
    13d8:	f1 04       	cpc	r15, r1
    13da:	01 05       	cpc	r16, r1
    13dc:	11 05       	cpc	r17, r1
    13de:	19 f4       	brne	.+6      	; 0x13e6 <__pack_f+0x50>
    13e0:	e0 e0       	ldi	r30, 0x00	; 0
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	96 c0       	rjmp	.+300    	; 0x1512 <__pack_f+0x17c>
    13e6:	62 81       	ldd	r22, Z+2	; 0x02
    13e8:	73 81       	ldd	r23, Z+3	; 0x03
    13ea:	9f ef       	ldi	r25, 0xFF	; 255
    13ec:	62 38       	cpi	r22, 0x82	; 130
    13ee:	79 07       	cpc	r23, r25
    13f0:	0c f0       	brlt	.+2      	; 0x13f4 <__pack_f+0x5e>
    13f2:	5b c0       	rjmp	.+182    	; 0x14aa <__pack_f+0x114>
    13f4:	22 e8       	ldi	r18, 0x82	; 130
    13f6:	3f ef       	ldi	r19, 0xFF	; 255
    13f8:	26 1b       	sub	r18, r22
    13fa:	37 0b       	sbc	r19, r23
    13fc:	2a 31       	cpi	r18, 0x1A	; 26
    13fe:	31 05       	cpc	r19, r1
    1400:	2c f0       	brlt	.+10     	; 0x140c <__pack_f+0x76>
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	40 e0       	ldi	r20, 0x00	; 0
    1408:	50 e0       	ldi	r21, 0x00	; 0
    140a:	2a c0       	rjmp	.+84     	; 0x1460 <__pack_f+0xca>
    140c:	b8 01       	movw	r22, r16
    140e:	a7 01       	movw	r20, r14
    1410:	02 2e       	mov	r0, r18
    1412:	04 c0       	rjmp	.+8      	; 0x141c <__pack_f+0x86>
    1414:	76 95       	lsr	r23
    1416:	67 95       	ror	r22
    1418:	57 95       	ror	r21
    141a:	47 95       	ror	r20
    141c:	0a 94       	dec	r0
    141e:	d2 f7       	brpl	.-12     	; 0x1414 <__pack_f+0x7e>
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	a0 e0       	ldi	r26, 0x00	; 0
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	04 c0       	rjmp	.+8      	; 0x1432 <__pack_f+0x9c>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	aa 1f       	adc	r26, r26
    1430:	bb 1f       	adc	r27, r27
    1432:	2a 95       	dec	r18
    1434:	d2 f7       	brpl	.-12     	; 0x142a <__pack_f+0x94>
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	a1 09       	sbc	r26, r1
    143a:	b1 09       	sbc	r27, r1
    143c:	8e 21       	and	r24, r14
    143e:	9f 21       	and	r25, r15
    1440:	a0 23       	and	r26, r16
    1442:	b1 23       	and	r27, r17
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	a1 05       	cpc	r26, r1
    1448:	b1 05       	cpc	r27, r1
    144a:	21 f0       	breq	.+8      	; 0x1454 <__pack_f+0xbe>
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	a0 e0       	ldi	r26, 0x00	; 0
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	9a 01       	movw	r18, r20
    1456:	ab 01       	movw	r20, r22
    1458:	28 2b       	or	r18, r24
    145a:	39 2b       	or	r19, r25
    145c:	4a 2b       	or	r20, r26
    145e:	5b 2b       	or	r21, r27
    1460:	da 01       	movw	r26, r20
    1462:	c9 01       	movw	r24, r18
    1464:	8f 77       	andi	r24, 0x7F	; 127
    1466:	90 70       	andi	r25, 0x00	; 0
    1468:	a0 70       	andi	r26, 0x00	; 0
    146a:	b0 70       	andi	r27, 0x00	; 0
    146c:	80 34       	cpi	r24, 0x40	; 64
    146e:	91 05       	cpc	r25, r1
    1470:	a1 05       	cpc	r26, r1
    1472:	b1 05       	cpc	r27, r1
    1474:	39 f4       	brne	.+14     	; 0x1484 <__pack_f+0xee>
    1476:	27 ff       	sbrs	r18, 7
    1478:	09 c0       	rjmp	.+18     	; 0x148c <__pack_f+0xf6>
    147a:	20 5c       	subi	r18, 0xC0	; 192
    147c:	3f 4f       	sbci	r19, 0xFF	; 255
    147e:	4f 4f       	sbci	r20, 0xFF	; 255
    1480:	5f 4f       	sbci	r21, 0xFF	; 255
    1482:	04 c0       	rjmp	.+8      	; 0x148c <__pack_f+0xf6>
    1484:	21 5c       	subi	r18, 0xC1	; 193
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	4f 4f       	sbci	r20, 0xFF	; 255
    148a:	5f 4f       	sbci	r21, 0xFF	; 255
    148c:	e0 e0       	ldi	r30, 0x00	; 0
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	20 30       	cpi	r18, 0x00	; 0
    1492:	a0 e0       	ldi	r26, 0x00	; 0
    1494:	3a 07       	cpc	r19, r26
    1496:	a0 e0       	ldi	r26, 0x00	; 0
    1498:	4a 07       	cpc	r20, r26
    149a:	a0 e4       	ldi	r26, 0x40	; 64
    149c:	5a 07       	cpc	r21, r26
    149e:	10 f0       	brcs	.+4      	; 0x14a4 <__pack_f+0x10e>
    14a0:	e1 e0       	ldi	r30, 0x01	; 1
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	79 01       	movw	r14, r18
    14a6:	8a 01       	movw	r16, r20
    14a8:	27 c0       	rjmp	.+78     	; 0x14f8 <__pack_f+0x162>
    14aa:	60 38       	cpi	r22, 0x80	; 128
    14ac:	71 05       	cpc	r23, r1
    14ae:	64 f5       	brge	.+88     	; 0x1508 <__pack_f+0x172>
    14b0:	fb 01       	movw	r30, r22
    14b2:	e1 58       	subi	r30, 0x81	; 129
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	d8 01       	movw	r26, r16
    14b8:	c7 01       	movw	r24, r14
    14ba:	8f 77       	andi	r24, 0x7F	; 127
    14bc:	90 70       	andi	r25, 0x00	; 0
    14be:	a0 70       	andi	r26, 0x00	; 0
    14c0:	b0 70       	andi	r27, 0x00	; 0
    14c2:	80 34       	cpi	r24, 0x40	; 64
    14c4:	91 05       	cpc	r25, r1
    14c6:	a1 05       	cpc	r26, r1
    14c8:	b1 05       	cpc	r27, r1
    14ca:	39 f4       	brne	.+14     	; 0x14da <__pack_f+0x144>
    14cc:	e7 fe       	sbrs	r14, 7
    14ce:	0d c0       	rjmp	.+26     	; 0x14ea <__pack_f+0x154>
    14d0:	80 e4       	ldi	r24, 0x40	; 64
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	a0 e0       	ldi	r26, 0x00	; 0
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	04 c0       	rjmp	.+8      	; 0x14e2 <__pack_f+0x14c>
    14da:	8f e3       	ldi	r24, 0x3F	; 63
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	a0 e0       	ldi	r26, 0x00	; 0
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e8 0e       	add	r14, r24
    14e4:	f9 1e       	adc	r15, r25
    14e6:	0a 1f       	adc	r16, r26
    14e8:	1b 1f       	adc	r17, r27
    14ea:	17 ff       	sbrs	r17, 7
    14ec:	05 c0       	rjmp	.+10     	; 0x14f8 <__pack_f+0x162>
    14ee:	16 95       	lsr	r17
    14f0:	07 95       	ror	r16
    14f2:	f7 94       	ror	r15
    14f4:	e7 94       	ror	r14
    14f6:	31 96       	adiw	r30, 0x01	; 1
    14f8:	87 e0       	ldi	r24, 0x07	; 7
    14fa:	16 95       	lsr	r17
    14fc:	07 95       	ror	r16
    14fe:	f7 94       	ror	r15
    1500:	e7 94       	ror	r14
    1502:	8a 95       	dec	r24
    1504:	d1 f7       	brne	.-12     	; 0x14fa <__pack_f+0x164>
    1506:	05 c0       	rjmp	.+10     	; 0x1512 <__pack_f+0x17c>
    1508:	ee 24       	eor	r14, r14
    150a:	ff 24       	eor	r15, r15
    150c:	87 01       	movw	r16, r14
    150e:	ef ef       	ldi	r30, 0xFF	; 255
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	6e 2f       	mov	r22, r30
    1514:	67 95       	ror	r22
    1516:	66 27       	eor	r22, r22
    1518:	67 95       	ror	r22
    151a:	90 2f       	mov	r25, r16
    151c:	9f 77       	andi	r25, 0x7F	; 127
    151e:	d7 94       	ror	r13
    1520:	dd 24       	eor	r13, r13
    1522:	d7 94       	ror	r13
    1524:	8e 2f       	mov	r24, r30
    1526:	86 95       	lsr	r24
    1528:	49 2f       	mov	r20, r25
    152a:	46 2b       	or	r20, r22
    152c:	58 2f       	mov	r21, r24
    152e:	5d 29       	or	r21, r13
    1530:	b7 01       	movw	r22, r14
    1532:	ca 01       	movw	r24, r20
    1534:	1f 91       	pop	r17
    1536:	0f 91       	pop	r16
    1538:	ff 90       	pop	r15
    153a:	ef 90       	pop	r14
    153c:	df 90       	pop	r13
    153e:	08 95       	ret

00001540 <__unpack_f>:
    1540:	fc 01       	movw	r30, r24
    1542:	db 01       	movw	r26, r22
    1544:	40 81       	ld	r20, Z
    1546:	51 81       	ldd	r21, Z+1	; 0x01
    1548:	22 81       	ldd	r18, Z+2	; 0x02
    154a:	62 2f       	mov	r22, r18
    154c:	6f 77       	andi	r22, 0x7F	; 127
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	22 1f       	adc	r18, r18
    1552:	22 27       	eor	r18, r18
    1554:	22 1f       	adc	r18, r18
    1556:	93 81       	ldd	r25, Z+3	; 0x03
    1558:	89 2f       	mov	r24, r25
    155a:	88 0f       	add	r24, r24
    155c:	82 2b       	or	r24, r18
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	99 1f       	adc	r25, r25
    1564:	99 27       	eor	r25, r25
    1566:	99 1f       	adc	r25, r25
    1568:	11 96       	adiw	r26, 0x01	; 1
    156a:	9c 93       	st	X, r25
    156c:	11 97       	sbiw	r26, 0x01	; 1
    156e:	21 15       	cp	r18, r1
    1570:	31 05       	cpc	r19, r1
    1572:	a9 f5       	brne	.+106    	; 0x15de <__unpack_f+0x9e>
    1574:	41 15       	cp	r20, r1
    1576:	51 05       	cpc	r21, r1
    1578:	61 05       	cpc	r22, r1
    157a:	71 05       	cpc	r23, r1
    157c:	11 f4       	brne	.+4      	; 0x1582 <__unpack_f+0x42>
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	37 c0       	rjmp	.+110    	; 0x15f0 <__unpack_f+0xb0>
    1582:	82 e8       	ldi	r24, 0x82	; 130
    1584:	9f ef       	ldi	r25, 0xFF	; 255
    1586:	13 96       	adiw	r26, 0x03	; 3
    1588:	9c 93       	st	X, r25
    158a:	8e 93       	st	-X, r24
    158c:	12 97       	sbiw	r26, 0x02	; 2
    158e:	9a 01       	movw	r18, r20
    1590:	ab 01       	movw	r20, r22
    1592:	67 e0       	ldi	r22, 0x07	; 7
    1594:	22 0f       	add	r18, r18
    1596:	33 1f       	adc	r19, r19
    1598:	44 1f       	adc	r20, r20
    159a:	55 1f       	adc	r21, r21
    159c:	6a 95       	dec	r22
    159e:	d1 f7       	brne	.-12     	; 0x1594 <__unpack_f+0x54>
    15a0:	83 e0       	ldi	r24, 0x03	; 3
    15a2:	8c 93       	st	X, r24
    15a4:	0d c0       	rjmp	.+26     	; 0x15c0 <__unpack_f+0x80>
    15a6:	22 0f       	add	r18, r18
    15a8:	33 1f       	adc	r19, r19
    15aa:	44 1f       	adc	r20, r20
    15ac:	55 1f       	adc	r21, r21
    15ae:	12 96       	adiw	r26, 0x02	; 2
    15b0:	8d 91       	ld	r24, X+
    15b2:	9c 91       	ld	r25, X
    15b4:	13 97       	sbiw	r26, 0x03	; 3
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	13 96       	adiw	r26, 0x03	; 3
    15ba:	9c 93       	st	X, r25
    15bc:	8e 93       	st	-X, r24
    15be:	12 97       	sbiw	r26, 0x02	; 2
    15c0:	20 30       	cpi	r18, 0x00	; 0
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	38 07       	cpc	r19, r24
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	48 07       	cpc	r20, r24
    15ca:	80 e4       	ldi	r24, 0x40	; 64
    15cc:	58 07       	cpc	r21, r24
    15ce:	58 f3       	brcs	.-42     	; 0x15a6 <__unpack_f+0x66>
    15d0:	14 96       	adiw	r26, 0x04	; 4
    15d2:	2d 93       	st	X+, r18
    15d4:	3d 93       	st	X+, r19
    15d6:	4d 93       	st	X+, r20
    15d8:	5c 93       	st	X, r21
    15da:	17 97       	sbiw	r26, 0x07	; 7
    15dc:	08 95       	ret
    15de:	2f 3f       	cpi	r18, 0xFF	; 255
    15e0:	31 05       	cpc	r19, r1
    15e2:	79 f4       	brne	.+30     	; 0x1602 <__unpack_f+0xc2>
    15e4:	41 15       	cp	r20, r1
    15e6:	51 05       	cpc	r21, r1
    15e8:	61 05       	cpc	r22, r1
    15ea:	71 05       	cpc	r23, r1
    15ec:	19 f4       	brne	.+6      	; 0x15f4 <__unpack_f+0xb4>
    15ee:	84 e0       	ldi	r24, 0x04	; 4
    15f0:	8c 93       	st	X, r24
    15f2:	08 95       	ret
    15f4:	64 ff       	sbrs	r22, 4
    15f6:	03 c0       	rjmp	.+6      	; 0x15fe <__unpack_f+0xbe>
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	8c 93       	st	X, r24
    15fc:	12 c0       	rjmp	.+36     	; 0x1622 <__unpack_f+0xe2>
    15fe:	1c 92       	st	X, r1
    1600:	10 c0       	rjmp	.+32     	; 0x1622 <__unpack_f+0xe2>
    1602:	2f 57       	subi	r18, 0x7F	; 127
    1604:	30 40       	sbci	r19, 0x00	; 0
    1606:	13 96       	adiw	r26, 0x03	; 3
    1608:	3c 93       	st	X, r19
    160a:	2e 93       	st	-X, r18
    160c:	12 97       	sbiw	r26, 0x02	; 2
    160e:	83 e0       	ldi	r24, 0x03	; 3
    1610:	8c 93       	st	X, r24
    1612:	87 e0       	ldi	r24, 0x07	; 7
    1614:	44 0f       	add	r20, r20
    1616:	55 1f       	adc	r21, r21
    1618:	66 1f       	adc	r22, r22
    161a:	77 1f       	adc	r23, r23
    161c:	8a 95       	dec	r24
    161e:	d1 f7       	brne	.-12     	; 0x1614 <__unpack_f+0xd4>
    1620:	70 64       	ori	r23, 0x40	; 64
    1622:	14 96       	adiw	r26, 0x04	; 4
    1624:	4d 93       	st	X+, r20
    1626:	5d 93       	st	X+, r21
    1628:	6d 93       	st	X+, r22
    162a:	7c 93       	st	X, r23
    162c:	17 97       	sbiw	r26, 0x07	; 7
    162e:	08 95       	ret

00001630 <__fpcmp_parts_f>:
    1630:	1f 93       	push	r17
    1632:	dc 01       	movw	r26, r24
    1634:	fb 01       	movw	r30, r22
    1636:	9c 91       	ld	r25, X
    1638:	92 30       	cpi	r25, 0x02	; 2
    163a:	08 f4       	brcc	.+2      	; 0x163e <__fpcmp_parts_f+0xe>
    163c:	47 c0       	rjmp	.+142    	; 0x16cc <__fpcmp_parts_f+0x9c>
    163e:	80 81       	ld	r24, Z
    1640:	82 30       	cpi	r24, 0x02	; 2
    1642:	08 f4       	brcc	.+2      	; 0x1646 <__fpcmp_parts_f+0x16>
    1644:	43 c0       	rjmp	.+134    	; 0x16cc <__fpcmp_parts_f+0x9c>
    1646:	94 30       	cpi	r25, 0x04	; 4
    1648:	51 f4       	brne	.+20     	; 0x165e <__fpcmp_parts_f+0x2e>
    164a:	11 96       	adiw	r26, 0x01	; 1
    164c:	1c 91       	ld	r17, X
    164e:	84 30       	cpi	r24, 0x04	; 4
    1650:	99 f5       	brne	.+102    	; 0x16b8 <__fpcmp_parts_f+0x88>
    1652:	81 81       	ldd	r24, Z+1	; 0x01
    1654:	68 2f       	mov	r22, r24
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	61 1b       	sub	r22, r17
    165a:	71 09       	sbc	r23, r1
    165c:	3f c0       	rjmp	.+126    	; 0x16dc <__fpcmp_parts_f+0xac>
    165e:	84 30       	cpi	r24, 0x04	; 4
    1660:	21 f0       	breq	.+8      	; 0x166a <__fpcmp_parts_f+0x3a>
    1662:	92 30       	cpi	r25, 0x02	; 2
    1664:	31 f4       	brne	.+12     	; 0x1672 <__fpcmp_parts_f+0x42>
    1666:	82 30       	cpi	r24, 0x02	; 2
    1668:	b9 f1       	breq	.+110    	; 0x16d8 <__fpcmp_parts_f+0xa8>
    166a:	81 81       	ldd	r24, Z+1	; 0x01
    166c:	88 23       	and	r24, r24
    166e:	89 f1       	breq	.+98     	; 0x16d2 <__fpcmp_parts_f+0xa2>
    1670:	2d c0       	rjmp	.+90     	; 0x16cc <__fpcmp_parts_f+0x9c>
    1672:	11 96       	adiw	r26, 0x01	; 1
    1674:	1c 91       	ld	r17, X
    1676:	11 97       	sbiw	r26, 0x01	; 1
    1678:	82 30       	cpi	r24, 0x02	; 2
    167a:	f1 f0       	breq	.+60     	; 0x16b8 <__fpcmp_parts_f+0x88>
    167c:	81 81       	ldd	r24, Z+1	; 0x01
    167e:	18 17       	cp	r17, r24
    1680:	d9 f4       	brne	.+54     	; 0x16b8 <__fpcmp_parts_f+0x88>
    1682:	12 96       	adiw	r26, 0x02	; 2
    1684:	2d 91       	ld	r18, X+
    1686:	3c 91       	ld	r19, X
    1688:	13 97       	sbiw	r26, 0x03	; 3
    168a:	82 81       	ldd	r24, Z+2	; 0x02
    168c:	93 81       	ldd	r25, Z+3	; 0x03
    168e:	82 17       	cp	r24, r18
    1690:	93 07       	cpc	r25, r19
    1692:	94 f0       	brlt	.+36     	; 0x16b8 <__fpcmp_parts_f+0x88>
    1694:	28 17       	cp	r18, r24
    1696:	39 07       	cpc	r19, r25
    1698:	bc f0       	brlt	.+46     	; 0x16c8 <__fpcmp_parts_f+0x98>
    169a:	14 96       	adiw	r26, 0x04	; 4
    169c:	8d 91       	ld	r24, X+
    169e:	9d 91       	ld	r25, X+
    16a0:	0d 90       	ld	r0, X+
    16a2:	bc 91       	ld	r27, X
    16a4:	a0 2d       	mov	r26, r0
    16a6:	24 81       	ldd	r18, Z+4	; 0x04
    16a8:	35 81       	ldd	r19, Z+5	; 0x05
    16aa:	46 81       	ldd	r20, Z+6	; 0x06
    16ac:	57 81       	ldd	r21, Z+7	; 0x07
    16ae:	28 17       	cp	r18, r24
    16b0:	39 07       	cpc	r19, r25
    16b2:	4a 07       	cpc	r20, r26
    16b4:	5b 07       	cpc	r21, r27
    16b6:	18 f4       	brcc	.+6      	; 0x16be <__fpcmp_parts_f+0x8e>
    16b8:	11 23       	and	r17, r17
    16ba:	41 f0       	breq	.+16     	; 0x16cc <__fpcmp_parts_f+0x9c>
    16bc:	0a c0       	rjmp	.+20     	; 0x16d2 <__fpcmp_parts_f+0xa2>
    16be:	82 17       	cp	r24, r18
    16c0:	93 07       	cpc	r25, r19
    16c2:	a4 07       	cpc	r26, r20
    16c4:	b5 07       	cpc	r27, r21
    16c6:	40 f4       	brcc	.+16     	; 0x16d8 <__fpcmp_parts_f+0xa8>
    16c8:	11 23       	and	r17, r17
    16ca:	19 f0       	breq	.+6      	; 0x16d2 <__fpcmp_parts_f+0xa2>
    16cc:	61 e0       	ldi	r22, 0x01	; 1
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	05 c0       	rjmp	.+10     	; 0x16dc <__fpcmp_parts_f+0xac>
    16d2:	6f ef       	ldi	r22, 0xFF	; 255
    16d4:	7f ef       	ldi	r23, 0xFF	; 255
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <__fpcmp_parts_f+0xac>
    16d8:	60 e0       	ldi	r22, 0x00	; 0
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	cb 01       	movw	r24, r22
    16de:	1f 91       	pop	r17
    16e0:	08 95       	ret

000016e2 <__udivmodhi4>:
    16e2:	aa 1b       	sub	r26, r26
    16e4:	bb 1b       	sub	r27, r27
    16e6:	51 e1       	ldi	r21, 0x11	; 17
    16e8:	07 c0       	rjmp	.+14     	; 0x16f8 <__udivmodhi4_ep>

000016ea <__udivmodhi4_loop>:
    16ea:	aa 1f       	adc	r26, r26
    16ec:	bb 1f       	adc	r27, r27
    16ee:	a6 17       	cp	r26, r22
    16f0:	b7 07       	cpc	r27, r23
    16f2:	10 f0       	brcs	.+4      	; 0x16f8 <__udivmodhi4_ep>
    16f4:	a6 1b       	sub	r26, r22
    16f6:	b7 0b       	sbc	r27, r23

000016f8 <__udivmodhi4_ep>:
    16f8:	88 1f       	adc	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	5a 95       	dec	r21
    16fe:	a9 f7       	brne	.-22     	; 0x16ea <__udivmodhi4_loop>
    1700:	80 95       	com	r24
    1702:	90 95       	com	r25
    1704:	bc 01       	movw	r22, r24
    1706:	cd 01       	movw	r24, r26
    1708:	08 95       	ret

0000170a <__prologue_saves__>:
    170a:	2f 92       	push	r2
    170c:	3f 92       	push	r3
    170e:	4f 92       	push	r4
    1710:	5f 92       	push	r5
    1712:	6f 92       	push	r6
    1714:	7f 92       	push	r7
    1716:	8f 92       	push	r8
    1718:	9f 92       	push	r9
    171a:	af 92       	push	r10
    171c:	bf 92       	push	r11
    171e:	cf 92       	push	r12
    1720:	df 92       	push	r13
    1722:	ef 92       	push	r14
    1724:	ff 92       	push	r15
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	ca 1b       	sub	r28, r26
    1734:	db 0b       	sbc	r29, r27
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	09 94       	ijmp

00001742 <__epilogue_restores__>:
    1742:	2a 88       	ldd	r2, Y+18	; 0x12
    1744:	39 88       	ldd	r3, Y+17	; 0x11
    1746:	48 88       	ldd	r4, Y+16	; 0x10
    1748:	5f 84       	ldd	r5, Y+15	; 0x0f
    174a:	6e 84       	ldd	r6, Y+14	; 0x0e
    174c:	7d 84       	ldd	r7, Y+13	; 0x0d
    174e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1750:	9b 84       	ldd	r9, Y+11	; 0x0b
    1752:	aa 84       	ldd	r10, Y+10	; 0x0a
    1754:	b9 84       	ldd	r11, Y+9	; 0x09
    1756:	c8 84       	ldd	r12, Y+8	; 0x08
    1758:	df 80       	ldd	r13, Y+7	; 0x07
    175a:	ee 80       	ldd	r14, Y+6	; 0x06
    175c:	fd 80       	ldd	r15, Y+5	; 0x05
    175e:	0c 81       	ldd	r16, Y+4	; 0x04
    1760:	1b 81       	ldd	r17, Y+3	; 0x03
    1762:	aa 81       	ldd	r26, Y+2	; 0x02
    1764:	b9 81       	ldd	r27, Y+1	; 0x01
    1766:	ce 0f       	add	r28, r30
    1768:	d1 1d       	adc	r29, r1
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	ed 01       	movw	r28, r26
    1776:	08 95       	ret

00001778 <_exit>:
    1778:	f8 94       	cli

0000177a <__stop_program>:
    177a:	ff cf       	rjmp	.-2      	; 0x177a <__stop_program>
